{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ACL no Laravel 8 Introdu\u00e7\u00e3o Instala\u00e7\u00e3o BootStrap Controllers Views Middleware Provider Trait Seeders Gerenciando ACL Tinker Testando o ACL Customizando Erros Refer\u00eancias Cr\u00e9ditos Licen\u00e7a","title":"In\u00edcio"},{"location":"#acl-no-laravel-8","text":"Introdu\u00e7\u00e3o Instala\u00e7\u00e3o BootStrap Controllers Views Middleware Provider Trait Seeders Gerenciando ACL Tinker Testando o ACL Customizando Erros Refer\u00eancias Cr\u00e9ditos Licen\u00e7a","title":"ACL no Laravel 8"},{"location":"bootstrap/","text":"Bootstrap Configurando o laravel 8 para usar bootstrap Para continuar usando bootstrap adicione ao ... app/Providers/AppServiceProvider.php use Illuminate\\Pagination\\Paginator; No m\u00e9todo boot Paginator::useBootstrap();","title":"Bootstrap"},{"location":"bootstrap/#bootstrap","text":"Configurando o laravel 8 para usar bootstrap Para continuar usando bootstrap adicione ao ... app/Providers/AppServiceProvider.php use Illuminate\\Pagination\\Paginator; No m\u00e9todo boot Paginator::useBootstrap();","title":"Bootstrap"},{"location":"commands/","text":"Gerenciando ACL via Artisan Lembrando que deve evitar anexar roles e permissions manualmente para usu\u00e1rios. Para isso foram criados alguns commands, que gerencial de forma adequada. Adicionar user com role e permission anexada a ele add:user {name} {email} {password} {slug-role} {slug-perm} Exemplo: php artisan add:user 'User user2' user2@gmail.com 123456 manager clients-index Atualizar usu\u00e1rio existente anexando uma role e uma permission a ele, gravado em user_role e user_permission user:upd {email} {slug-role} {slug-perm} Exemplo: php artisan user:upd manager@gmail.com manager clients-index Adicionar uma role para a tabela roles add:role {name-role} {slug-role} Exemplo: php artisan add:role 'Admin test' admin-test Adicionar uma permission para a tabela permissions add:perm {name-perm} {slug-perm} Exemplo: php artisan add:perm 'Clients test' clients-testt Remover permission de user de 'user-permission' del:perm {email-user} {slug-perm} Exemplo: php artisan del:perm super@gmail.com clients-index Remover role de user de 'user_role' del:role {email-user} {slug-role} Exemplo: php artisan del:role super@gmail.com user","title":"Gerenciando"},{"location":"commands/#gerenciando-acl-via-artisan","text":"Lembrando que deve evitar anexar roles e permissions manualmente para usu\u00e1rios. Para isso foram criados alguns commands, que gerencial de forma adequada. Adicionar user com role e permission anexada a ele add:user {name} {email} {password} {slug-role} {slug-perm} Exemplo: php artisan add:user 'User user2' user2@gmail.com 123456 manager clients-index Atualizar usu\u00e1rio existente anexando uma role e uma permission a ele, gravado em user_role e user_permission user:upd {email} {slug-role} {slug-perm} Exemplo: php artisan user:upd manager@gmail.com manager clients-index Adicionar uma role para a tabela roles add:role {name-role} {slug-role} Exemplo: php artisan add:role 'Admin test' admin-test Adicionar uma permission para a tabela permissions add:perm {name-perm} {slug-perm} Exemplo: php artisan add:perm 'Clients test' clients-testt Remover permission de user de 'user-permission' del:perm {email-user} {slug-perm} Exemplo: php artisan del:perm super@gmail.com clients-index Remover role de user de 'user_role' del:role {email-user} {slug-role} Exemplo: php artisan del:role super@gmail.com user","title":"Gerenciando ACL via Artisan"},{"location":"controllers/","text":"Exemplo de controller no Laravel ACL Vejamos um controller t\u00edpico do ribafs/laravel-acl Controller Clients <?php namespace App\\Http\\Controllers\\Admin; use App\\Http\\Controllers\\Controller; use App\\Http\\Requests; use App\\Models\\Client; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Auth; class ClientController extends Controller { public function __construct() { $this->middleware('auth'); } public function index(Request $request) { $auth = Auth::user()->hasRole('super', 'manager', 'user'); if((!$auth)){ return view('home'); }else{ $keyword = $request->get('search'); $perPage = 5; if (!empty($keyword)) { $clients = Client::where('name', 'LIKE', \"%$keyword%\") ->orWhere('email', 'LIKE', \"%$keyword%\") ->latest()->orderBy('id')->paginate($perPage); } else { $clients = Client::latest()->orderBy('id')->paginate($perPage); } return view('admin.clients.index', compact('clients')); } } public function create() { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ return view('admin.clients.create'); } } public function store(Request $request) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $requestData = $request->all(); Client::create($requestData); return redirect('admin/clients')->with('flash_message', 'Client added!'); } } public function show($id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $client = Client::findOrFail($id); return view('admin.clients.show', compact('client')); } } public function edit($id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $client = Client::findOrFail($id); return view('admin.clients.edit', compact('client')); } } public function update(Request $request, $id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $requestData = $request->all(); $client = Client::findOrFail($id); $client->update($requestData); return redirect('admin/clients')->with('flash_message', 'Client updated!'); } } public function destroy($id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ Client::destroy($id); return redirect('admin/clients')->with('flash_message', 'Client deleted!'); } } } Usando o m\u00e9todo can() Ent\u00e3o podemos controlar em nossos actions dos controller o acesso atrav\u00e9s das permiss\u00f5es dos usu\u00e1rios Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Controllers"},{"location":"controllers/#exemplo-de-controller-no-laravel-acl","text":"Vejamos um controller t\u00edpico do ribafs/laravel-acl","title":"Exemplo de controller no Laravel ACL"},{"location":"controllers/#controller-clients","text":"<?php namespace App\\Http\\Controllers\\Admin; use App\\Http\\Controllers\\Controller; use App\\Http\\Requests; use App\\Models\\Client; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Auth; class ClientController extends Controller { public function __construct() { $this->middleware('auth'); } public function index(Request $request) { $auth = Auth::user()->hasRole('super', 'manager', 'user'); if((!$auth)){ return view('home'); }else{ $keyword = $request->get('search'); $perPage = 5; if (!empty($keyword)) { $clients = Client::where('name', 'LIKE', \"%$keyword%\") ->orWhere('email', 'LIKE', \"%$keyword%\") ->latest()->orderBy('id')->paginate($perPage); } else { $clients = Client::latest()->orderBy('id')->paginate($perPage); } return view('admin.clients.index', compact('clients')); } } public function create() { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ return view('admin.clients.create'); } } public function store(Request $request) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $requestData = $request->all(); Client::create($requestData); return redirect('admin/clients')->with('flash_message', 'Client added!'); } } public function show($id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $client = Client::findOrFail($id); return view('admin.clients.show', compact('client')); } } public function edit($id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $client = Client::findOrFail($id); return view('admin.clients.edit', compact('client')); } } public function update(Request $request, $id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ $requestData = $request->all(); $client = Client::findOrFail($id); $client->update($requestData); return redirect('admin/clients')->with('flash_message', 'Client updated!'); } } public function destroy($id) { $auth = Auth::user()->hasRole('super', 'manager'); if((!$auth)){ return view('home'); }else{ Client::destroy($id); return redirect('admin/clients')->with('flash_message', 'Client deleted!'); } } }","title":"Controller Clients"},{"location":"controllers/#usando-o-metodo-can","text":"Ent\u00e3o podemos controlar em nossos actions dos controller o acesso atrav\u00e9s das permiss\u00f5es dos usu\u00e1rios Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Usando o m\u00e9todo can()"},{"location":"credits/","text":"Credits [Ribamar FS][https://ribafs.github.io] Boa parte deste pacote foi adaptado destes dois abaixo: [Crud Generator][https://github.com/appzcoder/crud\u01f5enerator] [Laravel Packager][https://github.com/Jeroen-G/laravel-packager]","title":"Cr\u00e9ditos"},{"location":"credits/#credits","text":"[Ribamar FS][https://ribafs.github.io] Boa parte deste pacote foi adaptado destes dois abaixo: [Crud Generator][https://github.com/appzcoder/crud\u01f5enerator] [Laravel Packager][https://github.com/Jeroen-G/laravel-packager]","title":"Credits"},{"location":"customizations/","text":"Customizando Os CRUDs existentes neste pacote foram criados usando o pacote ribafs/crud-generator-acl https://github.com/ribafs/crud-generator-acl Este pacote foi criado partindo do ribafs/crud-generator. O c ribafs/crud-generator \u00e9 um fork do excelente https://github.com/appzcoder/crud-generator Esse pacote facilita muito nosso trabalho, pois foi criado para complementar o trabalho do pacote laravel-acl. J\u00e1 vem com muitos e bons recursos. Verifique no site e experimente. Instalar e publicar o crud-generator-acl composer require ribafs/crud-generator-acl php artisan vendor:publish --provider=\"Ribafs\\CrudGeneratorAcl\\CrudGeneratorServiceProvider\" Criar o CRUD Products (exemplo) php artisan crud-acl:generate Products --fields='name#string; price#decimal' --view-path=admin --controller-namespace=App\\\\Http\\\\Controllers\\\\Admin --route-group=admin --form-helper=html Ap\u00f3s a cria\u00e7\u00e3o do CRUD fa\u00e7a os ajustes Remover a migration users criada acima pelo gerador, visto que j\u00e1 temos uma migration customizada. Renomear o controller de ProductsController para ProductControler (singular, de acordo com a conven\u00e7\u00e3o do alravel). Mudar o nome do controller na rota criada pelo gerador para o singular.","title":"Customiza\u00e7\u00f5es"},{"location":"customizations/#customizando","text":"Os CRUDs existentes neste pacote foram criados usando o pacote ribafs/crud-generator-acl https://github.com/ribafs/crud-generator-acl Este pacote foi criado partindo do ribafs/crud-generator. O c ribafs/crud-generator \u00e9 um fork do excelente https://github.com/appzcoder/crud-generator Esse pacote facilita muito nosso trabalho, pois foi criado para complementar o trabalho do pacote laravel-acl. J\u00e1 vem com muitos e bons recursos. Verifique no site e experimente.","title":"Customizando"},{"location":"customizations/#instalar-e-publicar-o-crud-generator-acl","text":"composer require ribafs/crud-generator-acl php artisan vendor:publish --provider=\"Ribafs\\CrudGeneratorAcl\\CrudGeneratorServiceProvider\"","title":"Instalar e publicar o crud-generator-acl"},{"location":"customizations/#criar-o-crud-products-exemplo","text":"php artisan crud-acl:generate Products --fields='name#string; price#decimal' --view-path=admin --controller-namespace=App\\\\Http\\\\Controllers\\\\Admin --route-group=admin --form-helper=html","title":"Criar o CRUD Products (exemplo)"},{"location":"customizations/#apos-a-criacao-do-crud-faca-os-ajustes","text":"Remover a migration users criada acima pelo gerador, visto que j\u00e1 temos uma migration customizada. Renomear o controller de ProductsController para ProductControler (singular, de acordo com a conven\u00e7\u00e3o do alravel). Mudar o nome do controller na rota criada pelo gerador para o singular.","title":"Ap\u00f3s a cria\u00e7\u00e3o do CRUD fa\u00e7a os ajustes"},{"location":"errors/","text":"Erros Erros que podem ocorrer ao instalar e configurar o ribafs/laravel-acl. Call to undefined method App\\Models\\User::roles() Explica\u00e7\u00e3o: Este indica que o trait ainda n\u00e3o foi configurado no model User (vide configura\u00e7\u00f5es) Caso a tela apare\u00e7a quebrada, com os bot\u00f5es inferior da tela Explica\u00e7\u00e3o: Indica que falta configurar o middleware (ver configura\u00e7\u00f5es) Sugest\u00e3o Fique atento para as recomenda\u00e7\u00f5es de instala\u00e7\u00e3o e configura\u00e7\u00f5es que as possibilidades de erro ser\u00e3o minimizadas.","title":"Erros"},{"location":"errors/#erros","text":"Erros que podem ocorrer ao instalar e configurar o ribafs/laravel-acl. Call to undefined method App\\Models\\User::roles() Explica\u00e7\u00e3o: Este indica que o trait ainda n\u00e3o foi configurado no model User (vide configura\u00e7\u00f5es) Caso a tela apare\u00e7a quebrada, com os bot\u00f5es inferior da tela Explica\u00e7\u00e3o: Indica que falta configurar o middleware (ver configura\u00e7\u00f5es)","title":"Erros"},{"location":"errors/#sugestao","text":"Fique atento para as recomenda\u00e7\u00f5es de instala\u00e7\u00e3o e configura\u00e7\u00f5es que as possibilidades de erro ser\u00e3o minimizadas.","title":"Sugest\u00e3o"},{"location":"installation/","text":"Instala\u00e7\u00e3o do laravel-acl Crie um novo aplicativo com laravel 8 para testar o pacote laravel new acl --jet --stack=livewire no cd acl Criar e configurar o banco .env Instalar o laravel-acl composer require ribafs/laravel-acl Publicar php artisan vendor:publish --provider=\"Ribafs\\LaravelAcl\\LaravelAclServiceProvider\" Agora todos os arquivos do pacote j\u00e1 est\u00e3o em seu aplicativo: migrations, seeders, Models, middleware, provider, etc Copiar alguns arquivos existentes Como este pacote n\u00e3o sobrescreve arquivos existestes, ent\u00e3o voc\u00ea precisar\u00e1 executar o comando copy:files (veja abaixo) para copiar sobrescrevendo os arquivos abaixo: DatabaseSeeder.php routes/web.php views/welcome.blade.php views/layouts/app.blade.php O comando far\u00e1 uma c\u00f3pia de cada arquivo sobrescrito, adicionando BAK ao seu nome. Exemplo: routes/webBAK.php Executar php artisan copy:files Configurar Registrar o middleware Editar o app/Http/Kernel.php e adicionar ao array $routeMiddleware = [ 'role' => \\Illuminate\\Auth\\Middleware\\RoleMiddleware::class, Registrar o provider Editar o config\\app.php e adicione ao array 'providers' => [ App\\Providers\\PermissionsServiceProvider::class, Editar o model app/Models/User.php e atualizar use App\\Traits\\HasPermissionsTrait; class User extends Authenticatable { use HasPermissionsTrait; Configurar o uso do bootstrap no laravel 8 Adicionar ao app/Providers/AppServiceProvider.php use Illuminate\\Pagination\\Paginator; public function boot() { Paginator::useBootstrap(); } Alterar o campo id da migration users Mudar para $table->increments('id'); Ajustar o t\u00edtulo do aplicativo (opcional) Editar o .env e mudar a linha com APP_NAME, para algo como: APP_NAME='ACL to Laravel 8' Executar Ap\u00f3s adicionar seu CRUD, execute e teste o ACL no controle do acesso do seu aplicativo. php artisan migrate --seed php artisan serve localhost:8000/login Use como exemplo: super@gmail.com 123456 Depois teste com os demais: admin, manager e user","title":"Instala\u00e7\u00e3o"},{"location":"installation/#instalacao-do-laravel-acl","text":"","title":"Instala\u00e7\u00e3o do laravel-acl"},{"location":"installation/#crie-um-novo-aplicativo-com-laravel-8-para-testar-o-pacote","text":"laravel new acl --jet --stack=livewire no cd acl","title":"Crie um novo aplicativo com laravel 8 para testar o pacote"},{"location":"installation/#criar-e-configurar-o-banco","text":".env","title":"Criar e configurar o banco"},{"location":"installation/#instalar-o-laravel-acl","text":"composer require ribafs/laravel-acl","title":"Instalar o laravel-acl"},{"location":"installation/#publicar","text":"php artisan vendor:publish --provider=\"Ribafs\\LaravelAcl\\LaravelAclServiceProvider\" Agora todos os arquivos do pacote j\u00e1 est\u00e3o em seu aplicativo: migrations, seeders, Models, middleware, provider, etc","title":"Publicar"},{"location":"installation/#copiar-alguns-arquivos-existentes","text":"Como este pacote n\u00e3o sobrescreve arquivos existestes, ent\u00e3o voc\u00ea precisar\u00e1 executar o comando copy:files (veja abaixo) para copiar sobrescrevendo os arquivos abaixo: DatabaseSeeder.php routes/web.php views/welcome.blade.php views/layouts/app.blade.php O comando far\u00e1 uma c\u00f3pia de cada arquivo sobrescrito, adicionando BAK ao seu nome. Exemplo: routes/webBAK.php","title":"Copiar alguns arquivos existentes"},{"location":"installation/#executar","text":"php artisan copy:files","title":"Executar"},{"location":"installation/#configurar","text":"","title":"Configurar"},{"location":"installation/#registrar-o-middleware","text":"Editar o app/Http/Kernel.php e adicionar ao array $routeMiddleware = [ 'role' => \\Illuminate\\Auth\\Middleware\\RoleMiddleware::class,","title":"Registrar o middleware"},{"location":"installation/#registrar-o-provider","text":"Editar o config\\app.php e adicione ao array 'providers' => [ App\\Providers\\PermissionsServiceProvider::class,","title":"Registrar o provider"},{"location":"installation/#editar-o-model-appmodelsuserphp-e-atualizar","text":"use App\\Traits\\HasPermissionsTrait; class User extends Authenticatable { use HasPermissionsTrait;","title":"Editar o model app/Models/User.php e atualizar"},{"location":"installation/#configurar-o-uso-do-bootstrap-no-laravel-8","text":"Adicionar ao app/Providers/AppServiceProvider.php use Illuminate\\Pagination\\Paginator; public function boot() { Paginator::useBootstrap(); }","title":"Configurar o uso do bootstrap no laravel 8"},{"location":"installation/#alterar-o-campo-id-da-migration-users","text":"Mudar para $table->increments('id');","title":"Alterar o campo id da migration users"},{"location":"installation/#ajustar-o-titulo-do-aplicativo-opcional","text":"Editar o .env e mudar a linha com APP_NAME, para algo como: APP_NAME='ACL to Laravel 8'","title":"Ajustar o t\u00edtulo do aplicativo (opcional)"},{"location":"installation/#executar_1","text":"Ap\u00f3s adicionar seu CRUD, execute e teste o ACL no controle do acesso do seu aplicativo. php artisan migrate --seed php artisan serve localhost:8000/login Use como exemplo: super@gmail.com 123456 Depois teste com os demais: admin, manager e user","title":"Executar"},{"location":"introduction/","text":"Introdu\u00e7\u00e3o Se\u00e7\u00e3o Inicial Se\u00e7\u00e3o Inicial Projeto de implementa\u00e7\u00e3o de ACL em aplicativos do Laravel from Scratch Usando Users, Roles, Permissions, Provider, Middleware, Trait, Gates, etc Observa\u00e7\u00e3o: este projeto \u00e9 fruto de v\u00e1rias pesquisas pela internet e de alguns experimentos meus Conta com duas vers\u00f5es - laravel-acl - para o laravel 8 - laravel7-acl - para o laravel 7 Planejamento inicial Teremos as seguintes tabelas principais users roles permissions clients Teremos os seguintes usu\u00e1rios 1-Super 2-Admin 3-Manager 4-User As roles 1-super 2-admin 3-manager 4-user As permiss\u00f5es 1-all-all 2-users-all 3-roles-all 4-permissions-all 5-clients-all 6-products-all 7-clients-index Tabelas piv\u00f4 As roles e permissions ser\u00e3o atribuidas aos usu\u00e1rios via c\u00f3digo e n\u00e3o diretamente. Elas ser\u00e3o armazenadas nas tabelas piv\u00f4: - user_role - user_permission - role_permission Gerenciamento via artisan Esta tarefa \u00e9 inicialmente realizada pelo PermissionsSeeder, mas ap\u00f3s a instala\u00e7\u00e3o users, roles e permissions podem ser gerenciados por commandos com artisan.","title":"Introdu\u00e7\u00e3o"},{"location":"introduction/#introducao","text":"Se\u00e7\u00e3o Inicial","title":"Introdu\u00e7\u00e3o"},{"location":"introduction/#secao-inicial","text":"Projeto de implementa\u00e7\u00e3o de ACL em aplicativos do Laravel from Scratch Usando Users, Roles, Permissions, Provider, Middleware, Trait, Gates, etc Observa\u00e7\u00e3o: este projeto \u00e9 fruto de v\u00e1rias pesquisas pela internet e de alguns experimentos meus Conta com duas vers\u00f5es - laravel-acl - para o laravel 8 - laravel7-acl - para o laravel 7","title":"Se\u00e7\u00e3o Inicial"},{"location":"introduction/#planejamento-inicial","text":"Teremos as seguintes tabelas principais users roles permissions clients","title":"Planejamento inicial"},{"location":"introduction/#teremos-os-seguintes-usuarios","text":"1-Super 2-Admin 3-Manager 4-User","title":"Teremos os seguintes usu\u00e1rios"},{"location":"introduction/#as-roles","text":"1-super 2-admin 3-manager 4-user","title":"As roles"},{"location":"introduction/#as-permissoes","text":"1-all-all 2-users-all 3-roles-all 4-permissions-all 5-clients-all 6-products-all 7-clients-index","title":"As permiss\u00f5es"},{"location":"introduction/#tabelas-pivo","text":"As roles e permissions ser\u00e3o atribuidas aos usu\u00e1rios via c\u00f3digo e n\u00e3o diretamente. Elas ser\u00e3o armazenadas nas tabelas piv\u00f4: - user_role - user_permission - role_permission","title":"Tabelas piv\u00f4"},{"location":"introduction/#gerenciamento-via-artisan","text":"Esta tarefa \u00e9 inicialmente realizada pelo PermissionsSeeder, mas ap\u00f3s a instala\u00e7\u00e3o users, roles e permissions podem ser gerenciados por commandos com artisan.","title":"Gerenciamento via artisan"},{"location":"license/","text":"Licen\u00e7a license. Please see the license file for more information.","title":"Licen\u00e7a"},{"location":"license/#licenca","text":"license. Please see the license file for more information.","title":"Licen\u00e7a"},{"location":"middleware/","text":"Middleware RoleMiddleware Este \u00e9 o middleware usado. <?php namespace App\\Http\\Middleware; use Closure; use Illuminate\\Http\\Request; class RoleMiddleware { /** * Handle an incoming request. * * @param \\Illuminate\\Http\\Request $request * @param \\Closure $next * @return mixed */ public function handle(Request $request, Closure $next, $role, $permission = null) { if(!$request->user()->hasRole($role)) { abort(404); } if($permission !== null && !$request->user()->can($permission)) { abort(404); } return $next($request); } } M\u00e9todo can($permission) Aqui nasce nosso m\u00e9todo can($permission), que pode ser usado nos actions dos controller, para controlar o acesso pelo slug da permission Usando Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Middleware"},{"location":"middleware/#middleware-rolemiddleware","text":"Este \u00e9 o middleware usado. <?php namespace App\\Http\\Middleware; use Closure; use Illuminate\\Http\\Request; class RoleMiddleware { /** * Handle an incoming request. * * @param \\Illuminate\\Http\\Request $request * @param \\Closure $next * @return mixed */ public function handle(Request $request, Closure $next, $role, $permission = null) { if(!$request->user()->hasRole($role)) { abort(404); } if($permission !== null && !$request->user()->can($permission)) { abort(404); } return $next($request); } }","title":"Middleware RoleMiddleware"},{"location":"middleware/#metodo-canpermission","text":"Aqui nasce nosso m\u00e9todo can($permission), que pode ser usado nos actions dos controller, para controlar o acesso pelo slug da permission","title":"M\u00e9todo can($permission)"},{"location":"middleware/#usando","text":"Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Usando"},{"location":"provider/","text":"Provider A defini\u00e7\u00e3o das tags customizadas do blade surgiu no provider abaixo Usando nas blades @role @endrole Que dever\u00e3o ser usadas nas blades Para uso nos controllers e routes temos: - super:role - admin:role - etc Nosso provider <?php namespace App\\Providers; use App\\Models\\Permission; use Illuminate\\Support\\Facades\\Blade; use Illuminate\\Support\\Facades\\Gate; use Illuminate\\Support\\ServiceProvider; class PermissionsServiceProvider extends ServiceProvider { public function register() { // } public function boot() { try { Permission::get()->map(function ($permission) { Gate::define($permission->slug, function ($user) use ($permission) { return $user->hasPermissionTo($permission); }); }); } catch (\\Exception $e) { report($e); return false; } //Blade directives Blade::directive('role', function ($role) { return \"<?php if(auth()->check() && auth()->user()->hasRole({$role})) : ?>\"; }); Blade::directive('endrole', function ($role) { return \"<?php endif; ?>\"; }); } } Para proteger as rotas Testar o middleware com - role:super - role:admin - etc Route::group(['middleware' => 'role:super'], function() { Route::get('/super', 'App\\Http\\Controllers\\TesteController@super'); }); Outro exemplo Route::middleware(['auth:sanctum', 'verified'])->get('/dashboard', function () { $super = (Auth::user()->hasRole('super')); $admin = (Auth::user()->hasRole('admin')); $manager = (Auth::user()->hasRole('manager')); $user = (Auth::user()->hasRole('user')); if($super) { return redirect('super/users'); }elseif($admin) { return redirect('admin/users'); }elseif($manager) { return redirect('manager/clients'); }elseif($user) { return redirect('user/clients'); } return view('dashboard'); })->name('dashboard'); Route::get('/home', function () { return view('home'); })->name('home'); Route::group(['middleware' => ['auth:sanctum', 'verified']], function () { Route::group(['middleware' => ['role:super'], 'prefix' => 'super'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); // super/users Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); // super/roles Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); // super/permissions Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); // super/clients Route::resource('products', 'App\\Http\\Controllers\\ProductController'); // super/products }); Route::group(['middleware' => ['role:admin'], 'prefix' => 'admin'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); }); Route::group(['middleware' => ['role:manager'], 'prefix' => 'manager'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); Route::resource('products', 'App\\Http\\Controllers\\ProductController'); }); Route::group(['middleware' => ['role:user'], 'prefix' => 'user'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); }); });","title":"Provider"},{"location":"provider/#provider","text":"A defini\u00e7\u00e3o das tags customizadas do blade surgiu no provider abaixo","title":"Provider"},{"location":"provider/#usando-nas-blades","text":"@role @endrole Que dever\u00e3o ser usadas nas blades","title":"Usando nas blades"},{"location":"provider/#para-uso-nos-controllers-e-routes-temos","text":"- super:role - admin:role - etc","title":"Para uso nos controllers e routes temos:"},{"location":"provider/#nosso-provider","text":"<?php namespace App\\Providers; use App\\Models\\Permission; use Illuminate\\Support\\Facades\\Blade; use Illuminate\\Support\\Facades\\Gate; use Illuminate\\Support\\ServiceProvider; class PermissionsServiceProvider extends ServiceProvider { public function register() { // } public function boot() { try { Permission::get()->map(function ($permission) { Gate::define($permission->slug, function ($user) use ($permission) { return $user->hasPermissionTo($permission); }); }); } catch (\\Exception $e) { report($e); return false; } //Blade directives Blade::directive('role', function ($role) { return \"<?php if(auth()->check() && auth()->user()->hasRole({$role})) : ?>\"; }); Blade::directive('endrole', function ($role) { return \"<?php endif; ?>\"; }); } }","title":"Nosso provider"},{"location":"provider/#para-proteger-as-rotas","text":"Testar o middleware com - role:super - role:admin - etc Route::group(['middleware' => 'role:super'], function() { Route::get('/super', 'App\\Http\\Controllers\\TesteController@super'); });","title":"Para proteger as rotas"},{"location":"provider/#outro-exemplo","text":"Route::middleware(['auth:sanctum', 'verified'])->get('/dashboard', function () { $super = (Auth::user()->hasRole('super')); $admin = (Auth::user()->hasRole('admin')); $manager = (Auth::user()->hasRole('manager')); $user = (Auth::user()->hasRole('user')); if($super) { return redirect('super/users'); }elseif($admin) { return redirect('admin/users'); }elseif($manager) { return redirect('manager/clients'); }elseif($user) { return redirect('user/clients'); } return view('dashboard'); })->name('dashboard'); Route::get('/home', function () { return view('home'); })->name('home'); Route::group(['middleware' => ['auth:sanctum', 'verified']], function () { Route::group(['middleware' => ['role:super'], 'prefix' => 'super'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); // super/users Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); // super/roles Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); // super/permissions Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); // super/clients Route::resource('products', 'App\\Http\\Controllers\\ProductController'); // super/products }); Route::group(['middleware' => ['role:admin'], 'prefix' => 'admin'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); }); Route::group(['middleware' => ['role:manager'], 'prefix' => 'manager'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); Route::resource('products', 'App\\Http\\Controllers\\ProductController'); }); Route::group(['middleware' => ['role:user'], 'prefix' => 'user'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); }); });","title":"Outro exemplo"},{"location":"references/","text":"Refer\u00eancias Alguns dos tutoriais pesquisados via Google, estudados, testados e adaptados para este proejto https://www.laravelcode.com/post/laravel-7-user-roles-and-permissions-tutorial-without-packages https://www.codechief.org/article/user-roles-and-permissions-tutorial-in-laravel-without-packages https://github.com/techmahedy/user-roles-and-permission-access http://www.rscoder.com/2020/05/laravel-7x-user-roles-and-permissions.html https://medium.com/@16shuklarahul/laravel-7-x-9ed4d41d327c https://itsolutionstuff.com/post/laravel-58-user-roles-and-permissions-tutorialexample.html https://github.com/usamamuneerchaudhary/roles-permissions https://github.com/artesaos/defender https://medium.com/swlh/laravel-authorization-and-roles-permission-management-6d8f2043ea20 https://thewebtier.com/laravel/understanding-roles-permissions-laravel/ Tamb\u00e9m recebi muitas informa\u00e7\u00f5es \u00fateis de grupo Laravel Brasil do Facebook - https://www.facebook.com/groups/laravelbrasil https://stackoverflow.com/ https://laracasts.com/discuss/channels/laravel/ E de outras generosas fontes","title":"Refer\u00eancias"},{"location":"references/#referencias","text":"Alguns dos tutoriais pesquisados via Google, estudados, testados e adaptados para este proejto https://www.laravelcode.com/post/laravel-7-user-roles-and-permissions-tutorial-without-packages https://www.codechief.org/article/user-roles-and-permissions-tutorial-in-laravel-without-packages https://github.com/techmahedy/user-roles-and-permission-access http://www.rscoder.com/2020/05/laravel-7x-user-roles-and-permissions.html https://medium.com/@16shuklarahul/laravel-7-x-9ed4d41d327c https://itsolutionstuff.com/post/laravel-58-user-roles-and-permissions-tutorialexample.html https://github.com/usamamuneerchaudhary/roles-permissions https://github.com/artesaos/defender https://medium.com/swlh/laravel-authorization-and-roles-permission-management-6d8f2043ea20 https://thewebtier.com/laravel/understanding-roles-permissions-laravel/ Tamb\u00e9m recebi muitas informa\u00e7\u00f5es \u00fateis de grupo Laravel Brasil do Facebook - https://www.facebook.com/groups/laravelbrasil https://stackoverflow.com/ https://laracasts.com/discuss/channels/laravel/ E de outras generosas fontes","title":"Refer\u00eancias"},{"location":"routes/","text":"Rotas As rotas deste projeto s\u00e3o espec\u00edficas com algumas nuances pr\u00f3prias. Confira. <?php use Illuminate\\Support\\Facades\\Route; use Illuminate\\Support\\Facades\\Auth; Route::get('/', function () { return view('welcome'); }); Route::get('/home', function () { return view('home'); })->name('home'); Route::middleware(['auth'])->get('/dashboard', function () { $super = Auth::user()->hasRole('super'); $admin = Auth::user()->hasRole('admin'); $manager = Auth::user()->hasRole('manager'); $user = Auth::user()->hasRole('user'); if($super || $admin) { return redirect('/admin/users'); }elseif($manager || $user) { return redirect('/admin/clients'); }else{ return view('/dashboard'); } })->name('dashboard'); Route::group(['prefix' => 'admin', 'middleware' => 'auth:sanctum'], function(){ Route::resource('users', 'App\\Http\\Controllers\\Admin\\UserController'); Route::resource('roles', 'App\\Http\\Controllers\\Admin\\RoleController'); Route::resource('permissions', 'App\\Http\\Controllers\\Admin\\PermissionController'); Route::resource('clients', 'App\\Http\\Controllers\\Admin\\ClientController'); });","title":"Rotas"},{"location":"routes/#rotas","text":"As rotas deste projeto s\u00e3o espec\u00edficas com algumas nuances pr\u00f3prias. Confira. <?php use Illuminate\\Support\\Facades\\Route; use Illuminate\\Support\\Facades\\Auth; Route::get('/', function () { return view('welcome'); }); Route::get('/home', function () { return view('home'); })->name('home'); Route::middleware(['auth'])->get('/dashboard', function () { $super = Auth::user()->hasRole('super'); $admin = Auth::user()->hasRole('admin'); $manager = Auth::user()->hasRole('manager'); $user = Auth::user()->hasRole('user'); if($super || $admin) { return redirect('/admin/users'); }elseif($manager || $user) { return redirect('/admin/clients'); }else{ return view('/dashboard'); } })->name('dashboard'); Route::group(['prefix' => 'admin', 'middleware' => 'auth:sanctum'], function(){ Route::resource('users', 'App\\Http\\Controllers\\Admin\\UserController'); Route::resource('roles', 'App\\Http\\Controllers\\Admin\\RoleController'); Route::resource('permissions', 'App\\Http\\Controllers\\Admin\\PermissionController'); Route::resource('clients', 'App\\Http\\Controllers\\Admin\\ClientController'); });","title":"Rotas"},{"location":"seeders/","text":"Seeders Este pacote vem com dois seeders: clients e permissions Clients <?php namespace Database\\Seeders; use Illuminate\\Database\\Seeder; use DB; class ClientsSeeder extends Seeder { /** * Run the database seeds. * * @return void */ public function run() { $faker = \\Faker\\Factory::create(); for($i=0; $i<=100; $i++): DB::table('clients') ->insert([ 'name' => $faker->name, 'email' => $faker->email, ]); endfor; } } Permissions O PermissionsSeeder \u00e9 o cora\u00e7\u00e3o do pacote laravel-acl. Ele faz o cadastro inicial das tabelas principais e piv\u00f4. O cadastro das tabelas piv\u00f4 \u00e9 feito indiretamente usando o m\u00e9todo attach(). <?php namespace Database\\Seeders; use Illuminate\\Database\\Seeder; use App\\Models\\Permission; use App\\Models\\Role; use App\\Models\\User; class PermissionsSeeder extends Seeder { public function run() { // Consultar e guardar em $super_permission a permiss\u00e3o all-all e demais $super_permission = Permission::where('slug','all-all')->first(); $admin_permission1 = Permission::where('slug','users-all')->first(); $admin_permission2 = Permission::where('slug','roles-all')->first(); $admin_permission3 = Permission::where('slug','permissions-all')->first(); $manager_permission1 = Permission::where('slug', 'clients-all')->first(); $manager_permission2 = Permission::where('slug', 'products-all')->first(); $user_permission = Permission::where('slug', 'clients-index')->first(); // Cadastrar a role super e anexar a ela suas permiss\u00f5es $super_role = new Role(); $super_role->slug = 'super'; $super_role->name = 'Super role'; $super_role->save(); $super_role->permissions()->attach($super_permission); // para que esta permission seja anexada sem problema, precisa existir em 'permissions' // Cadastrar a role admin e anexar a ela suas permiss\u00f5es $admin_role = new Role(); $admin_role->slug = 'admin'; $admin_role->name = 'Admin role'; $admin_role->save(); $admin_role->permissions()->attach($admin_permission1); $admin_role->permissions()->attach($admin_permission2); $admin_role->permissions()->attach($admin_permission3); // Cadastrar a role manager e anexar a ela suas permiss\u00f5es $manager_role = new Role(); $manager_role->slug = 'manager'; $manager_role->name = 'Manager role'; $manager_role->save(); $manager_role->permissions()->attach($manager_permission1); $manager_role->permissions()->attach($manager_permission2); // Cadastrar a role user e anexar a ela suas permiss\u00f5es $user_role = new Role(); $user_role->slug = 'user'; $user_role->name = 'Uer role'; $user_role->save(); $user_role->permissions()->attach($user_permission); // Consultar e guardar em $super_role a role super e demais $super_role = Role::where('slug','super')->first(); $admin_role = Role::where('slug','admin')->first(); $manager_role = Role::where('slug', 'manager')->first(); $user_role = Role::where('slug','user')->first(); // Cadastrar no banco a permission all-all e anexar sua(a) respectiva(s) role(s) $all_all = new Permission(); $all_all->slug = 'all-all'; $all_all->name = 'All permissions'; $all_all->save(); $all_all->roles()->attach($super_role); // para que esta role seja anexada sem problema, precisa existir em 'roles' // Cadastrar no banco a permission user-all e anexar sua(a) respectiva(s) role(s) $users_all = new Permission(); $users_all->slug = 'users-all'; $users_all->name = 'Users all'; $users_all->save(); $users_all->roles()->attach($admin_role); // Cadastrar no banco a permission roles-all e anexar sua(a) respectiva(s) role(s) $roles_all = new Permission(); $roles_all->slug = 'roles-all'; $roles_all->name = 'Roless all'; $roles_all->save(); $roles_all->roles()->attach($admin_role); // Cadastrar no banco a permission permissions-all e anexar sua(a) respectiva(s) role(s) $permissions_all = new Permission(); $permissions_all->slug = 'permissions-all'; $permissions_all->name = 'Permissions all'; $permissions_all->save(); $permissions_all->roles()->attach($admin_role); // Cadastrar no banco a permission clients-all e anexar sua(a) respectiva(s) role(s) $clients_all = new Permission(); $clients_all->slug = 'clients-all'; $clients_all->name = 'Clients all'; $clients_all->save(); $clients_all->roles()->attach($manager_role); // Cadastrar no banco a permission products-all e anexar sua(a) respectiva(s) role(s) $products_all = new Permission(); $products_all->slug = 'products-all'; $products_all->name = 'Products all'; $products_all->save(); $products_all->roles()->attach($manager_role); // Cadastrar no banco a permission clients-all e anexar sua(a) respectiva(s) role(s) $clients_index = new Permission(); $clients_index->slug = 'clients-index'; $clients_index->name = 'Clients index'; $clients_index->save(); $clients_index->roles()->attach($user_role); // Consultar e guardar em $super_role a role super $super_role = Role::where('slug','super')->first(); $admin_role = Role::where('slug','admin')->first(); $manager_role = Role::where('slug', 'manager')->first(); $user_role = Role::where('slug', 'user')->first(); // Consultar e guardar em $super_perm a permiss\u00e3o all-all e demais $super_perm = Permission::where('slug','all-all')->first(); $admin_perm1 = Permission::where('slug','users-all')->first(); $admin_perm2 = Permission::where('slug','roles-all')->first(); $admin_perm3 = Permission::where('slug','permissions-all')->first(); $manager_perm1 = Permission::where('slug','clients-all')->first(); $manager_perm2 = Permission::where('slug','products-all')->first(); $user_perm = Permission::where('slug','clients-index')->first(); // Cadastrar o user Super no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $super = new User(); $super->name = 'Super user'; $super->email = 'super@gmail.com'; $super->password = bcrypt('123456'); $super->save(); $super->roles()->attach($super_role); // Esta role precisa existir em 'roles' para que seja adequadamente anexada $super->permissions()->attach($super_perm); // Esta role precisa existir em 'permissions' para que seja adequadamente anexada // Cadastrar o user Admin no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $admin = new User(); $admin->name = 'Admin user'; $admin->email = 'admin@gmail.com'; $admin->password = bcrypt('123456'); $admin->save(); $admin->roles()->attach($admin_role); $admin->permissions()->attach($admin_perm1); $admin->permissions()->attach($admin_perm2); $admin->permissions()->attach($admin_perm3); // Cadastrar o user Manager no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $manager = new User(); $manager->name = 'Manager user'; $manager->email = 'manager@gmail.com'; $manager->password = bcrypt('123456'); $manager->save(); $manager->roles()->attach($manager_role); $manager->permissions()->attach($manager_perm1); $manager->permissions()->attach($manager_perm2); // Cadastrar o user User no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $user = new User(); $user->name = 'User user'; $user->email = 'user@gmail.com'; $user->password = bcrypt('123456'); $user->save(); $user->roles()->attach($user_role); $user->permissions()->attach($user_perm); } } ```","title":"Seeders"},{"location":"seeders/#seeders","text":"Este pacote vem com dois seeders: clients e permissions","title":"Seeders"},{"location":"seeders/#clients","text":"<?php namespace Database\\Seeders; use Illuminate\\Database\\Seeder; use DB; class ClientsSeeder extends Seeder { /** * Run the database seeds. * * @return void */ public function run() { $faker = \\Faker\\Factory::create(); for($i=0; $i<=100; $i++): DB::table('clients') ->insert([ 'name' => $faker->name, 'email' => $faker->email, ]); endfor; } }","title":"Clients"},{"location":"seeders/#permissions","text":"O PermissionsSeeder \u00e9 o cora\u00e7\u00e3o do pacote laravel-acl. Ele faz o cadastro inicial das tabelas principais e piv\u00f4. O cadastro das tabelas piv\u00f4 \u00e9 feito indiretamente usando o m\u00e9todo attach(). <?php namespace Database\\Seeders; use Illuminate\\Database\\Seeder; use App\\Models\\Permission; use App\\Models\\Role; use App\\Models\\User; class PermissionsSeeder extends Seeder { public function run() { // Consultar e guardar em $super_permission a permiss\u00e3o all-all e demais $super_permission = Permission::where('slug','all-all')->first(); $admin_permission1 = Permission::where('slug','users-all')->first(); $admin_permission2 = Permission::where('slug','roles-all')->first(); $admin_permission3 = Permission::where('slug','permissions-all')->first(); $manager_permission1 = Permission::where('slug', 'clients-all')->first(); $manager_permission2 = Permission::where('slug', 'products-all')->first(); $user_permission = Permission::where('slug', 'clients-index')->first(); // Cadastrar a role super e anexar a ela suas permiss\u00f5es $super_role = new Role(); $super_role->slug = 'super'; $super_role->name = 'Super role'; $super_role->save(); $super_role->permissions()->attach($super_permission); // para que esta permission seja anexada sem problema, precisa existir em 'permissions' // Cadastrar a role admin e anexar a ela suas permiss\u00f5es $admin_role = new Role(); $admin_role->slug = 'admin'; $admin_role->name = 'Admin role'; $admin_role->save(); $admin_role->permissions()->attach($admin_permission1); $admin_role->permissions()->attach($admin_permission2); $admin_role->permissions()->attach($admin_permission3); // Cadastrar a role manager e anexar a ela suas permiss\u00f5es $manager_role = new Role(); $manager_role->slug = 'manager'; $manager_role->name = 'Manager role'; $manager_role->save(); $manager_role->permissions()->attach($manager_permission1); $manager_role->permissions()->attach($manager_permission2); // Cadastrar a role user e anexar a ela suas permiss\u00f5es $user_role = new Role(); $user_role->slug = 'user'; $user_role->name = 'Uer role'; $user_role->save(); $user_role->permissions()->attach($user_permission); // Consultar e guardar em $super_role a role super e demais $super_role = Role::where('slug','super')->first(); $admin_role = Role::where('slug','admin')->first(); $manager_role = Role::where('slug', 'manager')->first(); $user_role = Role::where('slug','user')->first(); // Cadastrar no banco a permission all-all e anexar sua(a) respectiva(s) role(s) $all_all = new Permission(); $all_all->slug = 'all-all'; $all_all->name = 'All permissions'; $all_all->save(); $all_all->roles()->attach($super_role); // para que esta role seja anexada sem problema, precisa existir em 'roles' // Cadastrar no banco a permission user-all e anexar sua(a) respectiva(s) role(s) $users_all = new Permission(); $users_all->slug = 'users-all'; $users_all->name = 'Users all'; $users_all->save(); $users_all->roles()->attach($admin_role); // Cadastrar no banco a permission roles-all e anexar sua(a) respectiva(s) role(s) $roles_all = new Permission(); $roles_all->slug = 'roles-all'; $roles_all->name = 'Roless all'; $roles_all->save(); $roles_all->roles()->attach($admin_role); // Cadastrar no banco a permission permissions-all e anexar sua(a) respectiva(s) role(s) $permissions_all = new Permission(); $permissions_all->slug = 'permissions-all'; $permissions_all->name = 'Permissions all'; $permissions_all->save(); $permissions_all->roles()->attach($admin_role); // Cadastrar no banco a permission clients-all e anexar sua(a) respectiva(s) role(s) $clients_all = new Permission(); $clients_all->slug = 'clients-all'; $clients_all->name = 'Clients all'; $clients_all->save(); $clients_all->roles()->attach($manager_role); // Cadastrar no banco a permission products-all e anexar sua(a) respectiva(s) role(s) $products_all = new Permission(); $products_all->slug = 'products-all'; $products_all->name = 'Products all'; $products_all->save(); $products_all->roles()->attach($manager_role); // Cadastrar no banco a permission clients-all e anexar sua(a) respectiva(s) role(s) $clients_index = new Permission(); $clients_index->slug = 'clients-index'; $clients_index->name = 'Clients index'; $clients_index->save(); $clients_index->roles()->attach($user_role); // Consultar e guardar em $super_role a role super $super_role = Role::where('slug','super')->first(); $admin_role = Role::where('slug','admin')->first(); $manager_role = Role::where('slug', 'manager')->first(); $user_role = Role::where('slug', 'user')->first(); // Consultar e guardar em $super_perm a permiss\u00e3o all-all e demais $super_perm = Permission::where('slug','all-all')->first(); $admin_perm1 = Permission::where('slug','users-all')->first(); $admin_perm2 = Permission::where('slug','roles-all')->first(); $admin_perm3 = Permission::where('slug','permissions-all')->first(); $manager_perm1 = Permission::where('slug','clients-all')->first(); $manager_perm2 = Permission::where('slug','products-all')->first(); $user_perm = Permission::where('slug','clients-index')->first(); // Cadastrar o user Super no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $super = new User(); $super->name = 'Super user'; $super->email = 'super@gmail.com'; $super->password = bcrypt('123456'); $super->save(); $super->roles()->attach($super_role); // Esta role precisa existir em 'roles' para que seja adequadamente anexada $super->permissions()->attach($super_perm); // Esta role precisa existir em 'permissions' para que seja adequadamente anexada // Cadastrar o user Admin no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $admin = new User(); $admin->name = 'Admin user'; $admin->email = 'admin@gmail.com'; $admin->password = bcrypt('123456'); $admin->save(); $admin->roles()->attach($admin_role); $admin->permissions()->attach($admin_perm1); $admin->permissions()->attach($admin_perm2); $admin->permissions()->attach($admin_perm3); // Cadastrar o user Manager no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $manager = new User(); $manager->name = 'Manager user'; $manager->email = 'manager@gmail.com'; $manager->password = bcrypt('123456'); $manager->save(); $manager->roles()->attach($manager_role); $manager->permissions()->attach($manager_perm1); $manager->permissions()->attach($manager_perm2); // Cadastrar o user User no banco e anexar a ele sua(s) respectiva(s) role(s) e permission(s) $user = new User(); $user->name = 'User user'; $user->email = 'user@gmail.com'; $user->password = bcrypt('123456'); $user->save(); $user->roles()->attach($user_role); $user->permissions()->attach($user_perm); } } ```","title":"Permissions"},{"location":"tinker/","text":"Usando o Tinker Usando o Tinker para gerenciar a ACL A maioria das fun\u00e7\u00f5es do trait podem ser usadas via tinker para o gerenciamento do controle de acesso. Exemplos Checar se user logado tem uma das roles: admin ou super Verificar\u00e1 na tabela user_role php artisan tinker $user = User::find(1) // Trazer o user com id 1, no nosso caso o Super user $user->hasRole('admin', 'super') No caso deve retornar true Criar uma nova role Que ficar\u00e1'na tabela 'roles' $user->createRole('Role teste', 'teste') Mostrar\u00e1 a role criada na tela e a gravar\u00e1 na tabela 'roles' Atribuir uma ou mais role para o user atual Ser\u00e1 gravado na tabela user_role. Lembre que somente ser\u00e3o atribuidas se as roles esxistirem em 'roles' php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('editor','author') N\u00e3o atribuiu nenhuma, pois as roles citadas n\u00e3o existem em 'roles'. Novo teste php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('user') Agora sim, atribuiu, pois a role 'user' existe. Veja em user_role. Desatribuir uma role de um usu\u00e1rio php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->deleteRoles('user') Veja em 'user_role' Temos no trait fun\u00e7\u00f5es semelhantes para permissions","title":"Tinker"},{"location":"tinker/#usando-o-tinker","text":"Usando o Tinker para gerenciar a ACL A maioria das fun\u00e7\u00f5es do trait podem ser usadas via tinker para o gerenciamento do controle de acesso.","title":"Usando o Tinker"},{"location":"tinker/#exemplos","text":"","title":"Exemplos"},{"location":"tinker/#checar-se-user-logado-tem-uma-das-roles-admin-ou-super","text":"Verificar\u00e1 na tabela user_role php artisan tinker $user = User::find(1) // Trazer o user com id 1, no nosso caso o Super user $user->hasRole('admin', 'super') No caso deve retornar true","title":"Checar se user logado tem uma das roles: admin ou super"},{"location":"tinker/#criar-uma-nova-role","text":"Que ficar\u00e1'na tabela 'roles' $user->createRole('Role teste', 'teste') Mostrar\u00e1 a role criada na tela e a gravar\u00e1 na tabela 'roles'","title":"Criar uma nova role"},{"location":"tinker/#atribuir-uma-ou-mais-role-para-o-user-atual","text":"Ser\u00e1 gravado na tabela user_role. Lembre que somente ser\u00e3o atribuidas se as roles esxistirem em 'roles' php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('editor','author') N\u00e3o atribuiu nenhuma, pois as roles citadas n\u00e3o existem em 'roles'.","title":"Atribuir uma ou mais role para o user atual"},{"location":"tinker/#novo-teste","text":"php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('user') Agora sim, atribuiu, pois a role 'user' existe. Veja em user_role.","title":"Novo teste"},{"location":"tinker/#desatribuir-uma-role-de-um-usuario","text":"php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->deleteRoles('user') Veja em 'user_role'","title":"Desatribuir uma role de um usu\u00e1rio"},{"location":"tinker/#temos-no-trait-funcoes-semelhantes-para-permissions","text":"","title":"Temos no trait fun\u00e7\u00f5es semelhantes para permissions"},{"location":"training/","text":"Testando o ACL Testando o controle de acesso ao aplicativo, nas rotas, controllers e views. Acessar com super@gmail.com e 123456 Observe que ele \u00e9 redirecionado para users Veja que seu menu aparece com todos os CRUDs e ele tem acesso a tudo, todos as views de todos os CRUDs Acessar com admin@gmail.com e 123456 Observe que ele \u00e9 redirecionado para users Veja que seu menu aparecem users, roles e permissions, ou seja, administrativos. Acessa estes 3 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa clients nem products. Experimente acessar http://localhost:8000/admin/clients http://localhost:8000/admin/products Acessar com manager@gmail.com e 123456 Observe que ele \u00e9 redirecionado para clients Veja que seu menu aparecem clients e products, ou seja, os de neg\u00f3cio. Acessa estes 2 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa users, roles nem permissions. Experimente acessar http://localhost:8000/admin/users http://localhost:8000/admin/roles http://localhost:8000/admin/permissions http://localhost:8000/admin/permissions/1/edit Acessar com user@gmail.com e 123456 Observe que ele \u00e9 redirecionado para clients Veja que \u00e9 o usu\u00e1rio mais restrito, em seu menu aparece somente clients. Acessa clients e ele tem acesso somente a parte de clients/index. Experimente acessar qualquer outra \u00e1rea, por exemplo: http://localhost:8000/admin/roles http://localhost:8000/admin/clients/1/edit http://localhost:8000/admin/clients/show/1","title":"Testando"},{"location":"training/#testando-o-acl","text":"Testando o controle de acesso ao aplicativo, nas rotas, controllers e views.","title":"Testando o ACL"},{"location":"training/#acessar-com-supergmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para users Veja que seu menu aparece com todos os CRUDs e ele tem acesso a tudo, todos as views de todos os CRUDs","title":"Acessar com super@gmail.com e 123456"},{"location":"training/#acessar-com-admingmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para users Veja que seu menu aparecem users, roles e permissions, ou seja, administrativos. Acessa estes 3 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa clients nem products.","title":"Acessar com admin@gmail.com e 123456"},{"location":"training/#experimente-acessar","text":"http://localhost:8000/admin/clients http://localhost:8000/admin/products","title":"Experimente acessar"},{"location":"training/#acessar-com-managergmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para clients Veja que seu menu aparecem clients e products, ou seja, os de neg\u00f3cio. Acessa estes 2 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa users, roles nem permissions.","title":"Acessar com manager@gmail.com e 123456"},{"location":"training/#experimente-acessar_1","text":"http://localhost:8000/admin/users http://localhost:8000/admin/roles http://localhost:8000/admin/permissions http://localhost:8000/admin/permissions/1/edit","title":"Experimente acessar"},{"location":"training/#acessar-com-usergmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para clients Veja que \u00e9 o usu\u00e1rio mais restrito, em seu menu aparece somente clients. Acessa clients e ele tem acesso somente a parte de clients/index.","title":"Acessar com user@gmail.com e 123456"},{"location":"training/#experimente-acessar-qualquer-outra-area-por-exemplo","text":"http://localhost:8000/admin/roles http://localhost:8000/admin/clients/1/edit http://localhost:8000/admin/clients/show/1","title":"Experimente acessar qualquer outra \u00e1rea, por exemplo:"},{"location":"trait/","text":"Trait O HasPermissionsTrait \u00e9 pe\u00e7a fundamental do nosso pacote, com as principais fun\u00e7\u00f5es para o controle de acesso. <?php namespace App\\Traits; use App\\Models\\Permission; use App\\Models\\Role; trait HasPermissionsTrait { public function roles() { return $this->belongsToMany(Role::class,'user_role'); } public function permissions() { return $this->belongsToMany(Permission::class,'user_permission'); } // ROLES // Par\u00e2metro: roles. Ex: $user->hasRole('admin', 'super') // Checar se o user atual detem uma das roles especificadas // Retorno: true/false public function hasRole( ... $roles ) { foreach ($roles as $role) { if ($this->roles->contains('slug', $role)) { return true; } } return false; } protected function getAllRoles(array $roles) { return Role::whereIn('slug',$roles)->get(); } // Criar uma role a ser gravada em 'roles' // Par\u00e2metros: $name e $slug da role a ser criada // Sem retorno, grava e mostra na tela a role criada public function createRole($name, $slug){ $role = Role::create([ 'name' => $name, 'slug' => $slug ]); return $role; } // Par\u00e2metro: roles. Ex: $user->giveRolesTo('editor','author')// as roles j\u00e1 devem estar em 'roles' e ser\u00e3o atribuidas ao user locado // Atribuir roles para o user atual, gravadas na tabela user_role // Sem retorno. Grava as roles na tabela user_role para o user atual public function giveRolesTo(... $roles) { $roles = $this->getAllRoles($roles); if($roles === null) { return $this; } $this->roles()->saveMany($roles); return $this; } // Remove uma ou mais roles do user atual, que est\u00e3o em user_role // Par\u00e3metros: roles. Ex: $user->deleteRoles('admin', 'user') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deleteRoles( ... $roles ) { $roles = $this->getAllRoles($roles); $this->roles()->detach($roles); return $this; } // PERMISSIONS protected function hasPermission($permission) { return (bool) $this->permissions->where('slug', $permission)->count(); } // Par\u00e2metro: permission. $user->hasPermissionThroughRole('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionThroughRole($permission) { foreach ($permission->roles as $role){ if($this->roles->contains($role)) { return true; } } return false; } // Par\u00e2metro: permission. $user->hasPermissionTo('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionTo($permission) { return (bool) $this->hasPermissionThroughRole($permission) || $this->hasPermission($permission); } // Criar uma permission a ser gravada em 'permissions' // Par\u00e2metros: $name e $slug da permission a ser criada // Sem retorno, grava e mostra na tela a permission criada public function createPermission($name, $slug){ $permission = Permission::create([ 'name' => $name, 'slug' => $slug ]); return $permission; } protected function getAllPermissions(array $permissions) { return Permission::whereIn('slug',$permissions)->get(); } // Par\u00e2metro: $permissions. Ex: $user->givePermissionsTo('clients-index','clients-edit')// as permiss\u00f5es j\u00e1 devem estar em 'permissions' // Grava permiss\u00f5es para o user atual, na tabela user_permission // Sem retorno. Grava as permiss\u00f5es na tabela user_permission para o user atual public function givePermissionsTo(... $permissions) { $permissions = $this->getAllPermissions($permissions); if($permissions === null) { return $this; } $this->permissions()->saveMany($permissions); return $this; } // Remove uma ou mais permiss\u00f5es do user atual, que est\u00e3o em user_permission // Par\u00e3metros: permissions. Ex: $user->deletePermissions('clients-index', 'clients-edit') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deletePermissions( ... $permissions ) { $permissions = $this->getAllPermissions($permissions); $this->permissions()->detach($permissions); return $this; } }","title":"Trait"},{"location":"trait/#trait","text":"O HasPermissionsTrait \u00e9 pe\u00e7a fundamental do nosso pacote, com as principais fun\u00e7\u00f5es para o controle de acesso. <?php namespace App\\Traits; use App\\Models\\Permission; use App\\Models\\Role; trait HasPermissionsTrait { public function roles() { return $this->belongsToMany(Role::class,'user_role'); } public function permissions() { return $this->belongsToMany(Permission::class,'user_permission'); } // ROLES // Par\u00e2metro: roles. Ex: $user->hasRole('admin', 'super') // Checar se o user atual detem uma das roles especificadas // Retorno: true/false public function hasRole( ... $roles ) { foreach ($roles as $role) { if ($this->roles->contains('slug', $role)) { return true; } } return false; } protected function getAllRoles(array $roles) { return Role::whereIn('slug',$roles)->get(); } // Criar uma role a ser gravada em 'roles' // Par\u00e2metros: $name e $slug da role a ser criada // Sem retorno, grava e mostra na tela a role criada public function createRole($name, $slug){ $role = Role::create([ 'name' => $name, 'slug' => $slug ]); return $role; } // Par\u00e2metro: roles. Ex: $user->giveRolesTo('editor','author')// as roles j\u00e1 devem estar em 'roles' e ser\u00e3o atribuidas ao user locado // Atribuir roles para o user atual, gravadas na tabela user_role // Sem retorno. Grava as roles na tabela user_role para o user atual public function giveRolesTo(... $roles) { $roles = $this->getAllRoles($roles); if($roles === null) { return $this; } $this->roles()->saveMany($roles); return $this; } // Remove uma ou mais roles do user atual, que est\u00e3o em user_role // Par\u00e3metros: roles. Ex: $user->deleteRoles('admin', 'user') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deleteRoles( ... $roles ) { $roles = $this->getAllRoles($roles); $this->roles()->detach($roles); return $this; } // PERMISSIONS protected function hasPermission($permission) { return (bool) $this->permissions->where('slug', $permission)->count(); } // Par\u00e2metro: permission. $user->hasPermissionThroughRole('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionThroughRole($permission) { foreach ($permission->roles as $role){ if($this->roles->contains($role)) { return true; } } return false; } // Par\u00e2metro: permission. $user->hasPermissionTo('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionTo($permission) { return (bool) $this->hasPermissionThroughRole($permission) || $this->hasPermission($permission); } // Criar uma permission a ser gravada em 'permissions' // Par\u00e2metros: $name e $slug da permission a ser criada // Sem retorno, grava e mostra na tela a permission criada public function createPermission($name, $slug){ $permission = Permission::create([ 'name' => $name, 'slug' => $slug ]); return $permission; } protected function getAllPermissions(array $permissions) { return Permission::whereIn('slug',$permissions)->get(); } // Par\u00e2metro: $permissions. Ex: $user->givePermissionsTo('clients-index','clients-edit')// as permiss\u00f5es j\u00e1 devem estar em 'permissions' // Grava permiss\u00f5es para o user atual, na tabela user_permission // Sem retorno. Grava as permiss\u00f5es na tabela user_permission para o user atual public function givePermissionsTo(... $permissions) { $permissions = $this->getAllPermissions($permissions); if($permissions === null) { return $this; } $this->permissions()->saveMany($permissions); return $this; } // Remove uma ou mais permiss\u00f5es do user atual, que est\u00e3o em user_permission // Par\u00e3metros: permissions. Ex: $user->deletePermissions('clients-index', 'clients-edit') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deletePermissions( ... $permissions ) { $permissions = $this->getAllPermissions($permissions); $this->permissions()->detach($permissions); return $this; } }","title":"Trait"},{"location":"views/","text":"Views Vejamos duas views como exemplo das views do pacote. Nosso pacote conta com um layout customizado e com as views home.blade.php e welcome.blade.php. View index t\u00edpica Controle de acesso geral O controle de acesso geral \u00e9 para as 3 roles: super, manager e user Controle de acesso espec\u00edfico Mas o controle para todos os bot\u00f5es (new, view, edit e delete) e do form Search \u00e9 permitido apenas para os users: super e manager. O user com role user n\u00e3o tem acesso a estes itens. Customiza\u00e7\u00e3o Logo que o ribafs/laravel-acl \u00e9 instalado, publicado e inteiramente configurado, todas as permiss\u00f5es nas views est\u00e3o assim @role('super', 'admin') Assim somente um super ou admin tem acesso a tudo. Ent\u00e3o precisar\u00e1 ajustar de acordo com suas necessidades e usu\u00e1rios existentes. Necessidades e criatividade Estas motivar\u00e3o voc\u00ea para as customiza\u00e7\u00f5es. Permiss\u00f5es default Por padr\u00e3o eu pensei assim nas permiss\u00f5es de cada role: - super: pode tudo, sem exce\u00e7\u00e3o no aplicativo - admin: pode tudo mas somente nas tabelas administrativas: users, roles e permissions - manager: pode tudo nas tabelas tipo de neg\u00f3cio: clients - user: pode somente logar e acessar o index de clients e com restri\u00e7\u00f5es @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager', 'user') <div class=\"col-md-9\"> <div class=\"card\"> @role('super', 'manager') <div class=\"card-header\">Clients</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients/create') }}\" class=\"btn btn-success btn-sm\" title=\"Add New Client\"> <i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Add New </a> <form method=\"GET\" action=\"{{ url('/admin/clients') }}\" accept-charset=\"UTF-8\" class=\"form-inline my-2 my-lg-0 float-right\" role=\"search\"> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" name=\"search\" placeholder=\"Search...\" value=\"{{ request('search') }}\"> <span class=\"input-group-append\"> <button class=\"btn btn-secondary\" type=\"submit\"> <i class=\"fa fa-search\"></i> </button> </span> </div> </form> @endrole <br/> <br/> <div class=\"table-responsive\"> <table class=\"table table-sm\"> <thead> <tr> <th>ID</th><th>Name</th><th>Email</th>@role('super', 'manager')<th>Actions</th>@endrole </tr> </thead> <tbody> @foreach($clients as $item) <tr> <td>{{ $item->id }}</td> <td>{{ $item->name }}</td><td>{{ $item->email }}</td> <td> @role('super', 'manager') <a href=\"{{ url('/admin/clients/' . $item->id) }}\" title=\"View Client\"><button class=\"btn btn-info btn-sm\"><i class=\"fa fa-eye\" aria-hidden=\"true\"></i> View</button></a> <a href=\"{{ url('/admin/clients/' . $item->id . '/edit') }}\" title=\"Edit Client\"><button class=\"btn btn-primary btn-sm\"><i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Edit</button></a> <form method=\"POST\" action=\"{{ url('/admin/clients' . '/' . $item->id) }}\" accept-charset=\"UTF-8\" style=\"display:inline\"> {{ method_field('DELETE') }} {{ csrf_field() }} <button type=\"submit\" class=\"btn btn-danger btn-sm\" title=\"Delete Client\" onclick=\"return confirm(&quot;Confirm delete?&quot;)\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i> Delete</button> </form> @endrole </td> </tr> @endforeach </tbody> </table> <div class=\"pagination-wrapper\"> {!! $clients->appends(['search' => Request::get('search')])->render() !!} </div> </div> </div> </div> </div> @endrole </div> </div> @endsection Uma t\u00edpica edit.blade.php Veja que o acesso desta view \u00e9 somente para os users das roles super e manager. super pode tudo e manager pode tudo na clients. Se fosse uma edit.blade.php da users, roles ou permissions eu mudaria o controle para: @role('super', 'admin') @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager') <div class=\"col-md-9\"> <div class=\"card\"> <div class=\"card-header\">Edit Client #{{ $client->id }}</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients') }}\" title=\"Back\"><button class=\"btn btn-warning btn-sm\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i> Back</button></a> <br /> <br /> @if ($errors->any()) <ul class=\"alert alert-danger\"> @foreach ($errors->all() as $error) <li>{{ $error }}</li> @endforeach </ul> @endif <form method=\"POST\" action=\"{{ url('/admin/clients/' . $client->id) }}\" accept-charset=\"UTF-8\" class=\"form-horizontal\" enctype=\"multipart/form-data\"> {{ method_field('PATCH') }} {{ csrf_field() }} @include ('admin.clients.form', ['formMode' => 'edit']) </form> </div> </div> </div> @endrole </div> </div> @endsection","title":"Views"},{"location":"views/#views","text":"Vejamos duas views como exemplo das views do pacote. Nosso pacote conta com um layout customizado e com as views home.blade.php e welcome.blade.php.","title":"Views"},{"location":"views/#view-index-tipica","text":"","title":"View index t\u00edpica"},{"location":"views/#controle-de-acesso-geral","text":"O controle de acesso geral \u00e9 para as 3 roles: super, manager e user","title":"Controle de acesso geral"},{"location":"views/#controle-de-acesso-especifico","text":"Mas o controle para todos os bot\u00f5es (new, view, edit e delete) e do form Search \u00e9 permitido apenas para os users: super e manager. O user com role user n\u00e3o tem acesso a estes itens.","title":"Controle de acesso espec\u00edfico"},{"location":"views/#customizacao","text":"Logo que o ribafs/laravel-acl \u00e9 instalado, publicado e inteiramente configurado, todas as permiss\u00f5es nas views est\u00e3o assim @role('super', 'admin') Assim somente um super ou admin tem acesso a tudo. Ent\u00e3o precisar\u00e1 ajustar de acordo com suas necessidades e usu\u00e1rios existentes.","title":"Customiza\u00e7\u00e3o"},{"location":"views/#necessidades-e-criatividade","text":"Estas motivar\u00e3o voc\u00ea para as customiza\u00e7\u00f5es.","title":"Necessidades e criatividade"},{"location":"views/#permissoes-default","text":"Por padr\u00e3o eu pensei assim nas permiss\u00f5es de cada role: - super: pode tudo, sem exce\u00e7\u00e3o no aplicativo - admin: pode tudo mas somente nas tabelas administrativas: users, roles e permissions - manager: pode tudo nas tabelas tipo de neg\u00f3cio: clients - user: pode somente logar e acessar o index de clients e com restri\u00e7\u00f5es @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager', 'user') <div class=\"col-md-9\"> <div class=\"card\"> @role('super', 'manager') <div class=\"card-header\">Clients</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients/create') }}\" class=\"btn btn-success btn-sm\" title=\"Add New Client\"> <i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Add New </a> <form method=\"GET\" action=\"{{ url('/admin/clients') }}\" accept-charset=\"UTF-8\" class=\"form-inline my-2 my-lg-0 float-right\" role=\"search\"> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" name=\"search\" placeholder=\"Search...\" value=\"{{ request('search') }}\"> <span class=\"input-group-append\"> <button class=\"btn btn-secondary\" type=\"submit\"> <i class=\"fa fa-search\"></i> </button> </span> </div> </form> @endrole <br/> <br/> <div class=\"table-responsive\"> <table class=\"table table-sm\"> <thead> <tr> <th>ID</th><th>Name</th><th>Email</th>@role('super', 'manager')<th>Actions</th>@endrole </tr> </thead> <tbody> @foreach($clients as $item) <tr> <td>{{ $item->id }}</td> <td>{{ $item->name }}</td><td>{{ $item->email }}</td> <td> @role('super', 'manager') <a href=\"{{ url('/admin/clients/' . $item->id) }}\" title=\"View Client\"><button class=\"btn btn-info btn-sm\"><i class=\"fa fa-eye\" aria-hidden=\"true\"></i> View</button></a> <a href=\"{{ url('/admin/clients/' . $item->id . '/edit') }}\" title=\"Edit Client\"><button class=\"btn btn-primary btn-sm\"><i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Edit</button></a> <form method=\"POST\" action=\"{{ url('/admin/clients' . '/' . $item->id) }}\" accept-charset=\"UTF-8\" style=\"display:inline\"> {{ method_field('DELETE') }} {{ csrf_field() }} <button type=\"submit\" class=\"btn btn-danger btn-sm\" title=\"Delete Client\" onclick=\"return confirm(&quot;Confirm delete?&quot;)\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i> Delete</button> </form> @endrole </td> </tr> @endforeach </tbody> </table> <div class=\"pagination-wrapper\"> {!! $clients->appends(['search' => Request::get('search')])->render() !!} </div> </div> </div> </div> </div> @endrole </div> </div> @endsection","title":"Permiss\u00f5es default"},{"location":"views/#uma-tipica-editbladephp","text":"Veja que o acesso desta view \u00e9 somente para os users das roles super e manager. super pode tudo e manager pode tudo na clients. Se fosse uma edit.blade.php da users, roles ou permissions eu mudaria o controle para: @role('super', 'admin') @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager') <div class=\"col-md-9\"> <div class=\"card\"> <div class=\"card-header\">Edit Client #{{ $client->id }}</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients') }}\" title=\"Back\"><button class=\"btn btn-warning btn-sm\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i> Back</button></a> <br /> <br /> @if ($errors->any()) <ul class=\"alert alert-danger\"> @foreach ($errors->all() as $error) <li>{{ $error }}</li> @endforeach </ul> @endif <form method=\"POST\" action=\"{{ url('/admin/clients/' . $client->id) }}\" accept-charset=\"UTF-8\" class=\"form-horizontal\" enctype=\"multipart/form-data\"> {{ method_field('PATCH') }} {{ csrf_field() }} @include ('admin.clients.form', ['formMode' => 'edit']) </form> </div> </div> </div> @endrole </div> </div> @endsection","title":"Uma t\u00edpica edit.blade.php"}]}