{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ACL no Laravel 8 Introdu\u00e7\u00e3o Instala\u00e7\u00e3o BootStrap Controllers Views Middleware Provider Trait Seeders Gerenciando Tinker Testando o ACL Customizando Erros Documenta\u00e7\u00e3o Refer\u00eancias Cr\u00e9ditos Licen\u00e7a","title":"In\u00edcio"},{"location":"#acl-no-laravel-8","text":"Introdu\u00e7\u00e3o Instala\u00e7\u00e3o BootStrap Controllers Views Middleware Provider Trait Seeders Gerenciando Tinker Testando o ACL Customizando Erros Documenta\u00e7\u00e3o Refer\u00eancias Cr\u00e9ditos Licen\u00e7a","title":"ACL no Laravel 8"},{"location":"bootstrap/","text":"Bootstrap Configurando o laravel 8 para usar bootstrap Para continuar usando bootstrap adicione ao ... 1 2 3 app/Providers/AppServiceProvider.php use Illuminate\\Pagination\\Paginator; No m\u00e9todo boot 1 Paginator::useBootstrap();","title":"Bootstrap"},{"location":"bootstrap/#bootstrap","text":"Configurando o laravel 8 para usar bootstrap Para continuar usando bootstrap adicione ao ... 1 2 3 app/Providers/AppServiceProvider.php use Illuminate\\Pagination\\Paginator; No m\u00e9todo boot 1 Paginator::useBootstrap();","title":"Bootstrap"},{"location":"controllers/","text":"Exemplo de controller no Laravel ACL Vejamos um controller t\u00edpico do ribafs/laravel-acl Controller Clients 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 <?php namespace App\\Http\\Controllers\\Admin ; use App\\Http\\Controllers\\Controller ; use App\\Http\\Requests ; use App\\Models\\Client ; use Illuminate\\Http\\Request ; use Illuminate\\Support\\Facades\\Auth ; class ClientController extends Controller { public function __construct () { $this -> middleware ( 'auth' ); } public function index ( Request $request ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' , 'user' ); if (( ! $auth )){ return view ( 'home' ); } else { $keyword = $request -> get ( 'search' ); $perPage = 5 ; if ( ! empty ( $keyword )) { $clients = Client :: where ( 'name' , 'LIKE' , \"% $keyword %\" ) -> orWhere ( 'email' , 'LIKE' , \"% $keyword %\" ) -> latest () -> orderBy ( 'id' ) -> paginate ( $perPage ); } else { $clients = Client :: latest () -> orderBy ( 'id' ) -> paginate ( $perPage ); } return view ( 'admin.clients.index' , compact ( 'clients' )); } } public function create () { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { return view ( 'admin.clients.create' ); } } public function store ( Request $request ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $requestData = $request -> all (); Client :: create ( $requestData ); return redirect ( 'admin/clients' ) -> with ( 'flash_message' , 'Client added!' ); } } public function show ( $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $client = Client :: findOrFail ( $id ); return view ( 'admin.clients.show' , compact ( 'client' )); } } public function edit ( $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $client = Client :: findOrFail ( $id ); return view ( 'admin.clients.edit' , compact ( 'client' )); } } public function update ( Request $request , $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $requestData = $request -> all (); $client = Client :: findOrFail ( $id ); $client -> update ( $requestData ); return redirect ( 'admin/clients' ) -> with ( 'flash_message' , 'Client updated!' ); } } public function destroy ( $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { Client :: destroy ( $id ); return redirect ( 'admin/clients' ) -> with ( 'flash_message' , 'Client deleted!' ); } } } Usando o m\u00e9todo can() Ent\u00e3o podemos controlar em nossos actions dos controller o acesso atrav\u00e9s das permiss\u00f5es dos usu\u00e1rios Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all 1 2 3 4 5 public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Controllers"},{"location":"controllers/#exemplo-de-controller-no-laravel-acl","text":"Vejamos um controller t\u00edpico do ribafs/laravel-acl","title":"Exemplo de controller no Laravel ACL"},{"location":"controllers/#controller-clients","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 <?php namespace App\\Http\\Controllers\\Admin ; use App\\Http\\Controllers\\Controller ; use App\\Http\\Requests ; use App\\Models\\Client ; use Illuminate\\Http\\Request ; use Illuminate\\Support\\Facades\\Auth ; class ClientController extends Controller { public function __construct () { $this -> middleware ( 'auth' ); } public function index ( Request $request ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' , 'user' ); if (( ! $auth )){ return view ( 'home' ); } else { $keyword = $request -> get ( 'search' ); $perPage = 5 ; if ( ! empty ( $keyword )) { $clients = Client :: where ( 'name' , 'LIKE' , \"% $keyword %\" ) -> orWhere ( 'email' , 'LIKE' , \"% $keyword %\" ) -> latest () -> orderBy ( 'id' ) -> paginate ( $perPage ); } else { $clients = Client :: latest () -> orderBy ( 'id' ) -> paginate ( $perPage ); } return view ( 'admin.clients.index' , compact ( 'clients' )); } } public function create () { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { return view ( 'admin.clients.create' ); } } public function store ( Request $request ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $requestData = $request -> all (); Client :: create ( $requestData ); return redirect ( 'admin/clients' ) -> with ( 'flash_message' , 'Client added!' ); } } public function show ( $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $client = Client :: findOrFail ( $id ); return view ( 'admin.clients.show' , compact ( 'client' )); } } public function edit ( $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $client = Client :: findOrFail ( $id ); return view ( 'admin.clients.edit' , compact ( 'client' )); } } public function update ( Request $request , $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { $requestData = $request -> all (); $client = Client :: findOrFail ( $id ); $client -> update ( $requestData ); return redirect ( 'admin/clients' ) -> with ( 'flash_message' , 'Client updated!' ); } } public function destroy ( $id ) { $auth = Auth :: user () -> hasRole ( 'super' , 'manager' ); if (( ! $auth )){ return view ( 'home' ); } else { Client :: destroy ( $id ); return redirect ( 'admin/clients' ) -> with ( 'flash_message' , 'Client deleted!' ); } } }","title":"Controller Clients"},{"location":"controllers/#usando-o-metodo-can","text":"Ent\u00e3o podemos controlar em nossos actions dos controller o acesso atrav\u00e9s das permiss\u00f5es dos usu\u00e1rios Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all 1 2 3 4 5 public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Usando o m\u00e9todo can()"},{"location":"credits/","text":"Credits Ribamar FS Boa parte deste pacote foi adaptado destes dois abaixo: Crud Generator Laravel Packager MkDocs","title":"Cr\u00e9ditos"},{"location":"credits/#credits","text":"Ribamar FS Boa parte deste pacote foi adaptado destes dois abaixo: Crud Generator Laravel Packager MkDocs","title":"Credits"},{"location":"customizations/","text":"Customizando Os CRUDs existentes neste pacote foram criados usando o pacote ribafs/crud-generator-acl https://github.com/ribafs/crud-generator-acl Este pacote foi criado partindo do ribafs/crud-generator. O ribafs/crud-generator \u00e9 um fork do excelente https://github.com/appzcoder/crud-generator Esse pacote facilita muito nosso trabalho, pois foi criado para complementar o trabalho do pacote laravel-acl. J\u00e1 vem com muitos e bons recursos. Verifique no site e experimente. Instalar e publicar o crud-generator-acl 1 2 3 composer require ribafs/crud-generator-acl php artisan vendor:publish --provider = \"Ribafs\\CrudGeneratorAcl\\CrudGeneratorServiceProvider\" Criar o CRUD Products (exemplo) 1 php artisan crud-acl:generate Products --fields = 'name#string; price#decimal' --view-path = admin --controller-namespace = App \\\\ Http \\\\ Controllers \\\\ Admin --route-group = admin --form-helper = html Ap\u00f3s a cria\u00e7\u00e3o do CRUD fa\u00e7a os ajustes Remover a migration users criada acima pelo gerador, visto que j\u00e1 temos uma migration customizada. Renomear o controller de ProductsController para ProductControler (singular, de acordo com a conven\u00e7\u00e3o do alravel). Mudar o nome do controller na rota criada pelo gerador para o singular.","title":"Customiza\u00e7\u00f5es"},{"location":"customizations/#customizando","text":"Os CRUDs existentes neste pacote foram criados usando o pacote ribafs/crud-generator-acl https://github.com/ribafs/crud-generator-acl Este pacote foi criado partindo do ribafs/crud-generator. O ribafs/crud-generator \u00e9 um fork do excelente https://github.com/appzcoder/crud-generator Esse pacote facilita muito nosso trabalho, pois foi criado para complementar o trabalho do pacote laravel-acl. J\u00e1 vem com muitos e bons recursos. Verifique no site e experimente.","title":"Customizando"},{"location":"customizations/#instalar-e-publicar-o-crud-generator-acl","text":"1 2 3 composer require ribafs/crud-generator-acl php artisan vendor:publish --provider = \"Ribafs\\CrudGeneratorAcl\\CrudGeneratorServiceProvider\"","title":"Instalar e publicar o crud-generator-acl"},{"location":"customizations/#criar-o-crud-products-exemplo","text":"1 php artisan crud-acl:generate Products --fields = 'name#string; price#decimal' --view-path = admin --controller-namespace = App \\\\ Http \\\\ Controllers \\\\ Admin --route-group = admin --form-helper = html","title":"Criar o CRUD Products (exemplo)"},{"location":"customizations/#apos-a-criacao-do-crud-faca-os-ajustes","text":"Remover a migration users criada acima pelo gerador, visto que j\u00e1 temos uma migration customizada. Renomear o controller de ProductsController para ProductControler (singular, de acordo com a conven\u00e7\u00e3o do alravel). Mudar o nome do controller na rota criada pelo gerador para o singular.","title":"Ap\u00f3s a cria\u00e7\u00e3o do CRUD fa\u00e7a os ajustes"},{"location":"documentation/","text":"Documenta\u00e7\u00e3o Este site foi criado usando o mkdocs. Criar sites de documenta\u00e7\u00e3o com MkDocs de forma simples usando markdown e ele exporta (build) em HTML. Site oficial https://www.mkdocs.org/ Instala\u00e7\u00e3o https://www.mkdocs.org/#installation Instala\u00e7\u00e3o no Linux Mint 20 1 2 3 4 5 6 7 sudo apt-get install python3-pip sudo pip install --upgrade pip sudo pip3 install mkdocs mkdocs --version Criar um site de documenta\u00e7\u00e3o Acessar o terminal/prompt e executar para criar o site na pasta docs 1 mkdocs new docs O comando acima criou a estrutura: 1 2 3 4 5 6 7 8 9 mkdocs.yml /docs/ index.md cd docs mkdocs serve http://127.0.0.1:8000/ Exemplo de site. Este site da documenta\u00e7\u00e3o do laravel-acl Configura\u00e7\u00f5e a serem usadas no mkdocs.yml https://www.mkdocs.org/user-guide/configuration Editar o mkdocs.yml e deixar assim: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 site_name: ACL to Laravel 8 theme: name: 'readthedocs' favicon: 'img/favicon.ico' site_url: https://ribafs.github.io/ repo_url: https://github.com/ribafs/laravel-acl/ site_description: ACL Implementation to Laravel 8 site_author: Ribamar FS nav: - In\u00edcio: index.md - Introdu\u00e7\u00e3o: introduction.md - Instala\u00e7\u00e3o: installation.md - Bootstrap: bootstrap.md - Controllers: controllers.md - Views: views.md - Rotas: routes.md - Seeders: seeders.md - Middleware: middleware.md - Provider: provider.md - Trait: trait.md - Tinker: tinker.md - Gerenciando: manager.md - Customiza\u00e7\u00f5es: customizations.md - Testando: training.md - Erros: errors.md - Documenta\u00e7\u00e3o: documentation.md - Licen\u00e7a: license.md - Refer\u00eancias: references.md - Testando: training.md - Cr\u00e9ditos: credits.md Editar o index.md e deixar assim: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 - ## ACL no Laravel 8 - [ Introdu\u00e7\u00e3o ]( introduction.md ) - [ Instala\u00e7\u00e3o ]( installation.md ) - [ BootStrap ]( bootstrap.md ) - [ Controllers ]( controllers.md ) - [ Views ]( views.md ) - [ Middleware ]( middleware.md ) - [ Provider ]( provider.md ) - [ Trait ]( trait.md ) - [ Seeders ]( seeders.md ) - [ Gerenciando ]( manager.md ) - [ Tinker ]( tinker.md ) - [ Testando o ACL ]( training.md ) - [ Customizando ]( customizations.md ) - [ Erros ]( errors.md ) - [ Documenta\u00e7\u00e3o ]( documentation.md ) - [ Refer\u00eancias ]( references.md ) - [ Cr\u00e9ditos ]( credits.md ) - [ Licen\u00e7a ]( license.md ) O index.md mostrar\u00e1 seu conte\u00fado no painel d a direita quando clicamos em In\u00edcio. Agora basta criar cada um dos arquivos com a estens\u00e3o .md. Exemplo: introduction.md 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Introdu\u00e7\u00e3o --- - [ Se\u00e7\u00e3o Inicial ]( #section-1) <a name = \"section-1\" ></a> ## Se\u00e7\u00e3o Inicial Projeto de implementa\u00e7\u00e3o de ACL em aplicativos do Laravel from Scratch Usando Users, Roles, Permissions, Provider, Middleware, Trait, Gates, etc Observa\u00e7\u00e3o: este projeto \u00e9 fruto de v\u00e1rias pesquisas pela internet e de alguns experimentos meus Conta com duas vers\u00f5es - laravel-acl - para o laravel 8 - laravel7-acl - para o laravel 7 ... E segue. Temas Existem alguns temas legais. Eu gosto muito deste, readthedocs Existem alguns temas nativos e o readthedocsc \u00e9 um deles. Para instalar um tema de terceiros: sudo pip3 install mkdocs-material Usando um tema Basta trocar no mkdocs.yml: 1 2 theme: name: 'readthedocs' Temas de terceiros https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Extens\u00f5es https://facelessuser.github.io/pymdown-extensions/ https://facelessuser.github.io/pymdown-extensions/extensions/highlight/ Build Quando o site estiver pronto, ent\u00e3o exportamos em HTML para hospedar onde quisermos, com o comando mkdocs build Ele cria toda a estrutura HTML na pasta /site Limpando um build anterior mkdocs build --clean Outros comandos mkdocs --help mkdocs build --help Atualiza\u00e7\u00f5es autom\u00e1ticas Com o server ativo, ap\u00f3s alguma altera\u00e7\u00e3o no mkdocs.yml ele j\u00e1 atualiza sem precisar de refresh Imagens Imagens A pasta fica dentro da docs 1 2 3 docs/ img/ riba.png Link para a imagem num arquivo .md: 1 2 ! [ RibaFS ]( img/riba.png ) ! [ RibaFS ]( ../img/riba.png ) Refer\u00eancias Markdown Cheatsheet https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet Mais detalhes http://daringfireball.net/projects/markdown/ http://github.github.com/github-flavored-markdown/ Editor online https://stackedit.io/app Editor offline http://pad.haroopress.com/user.html","title":"Documenta\u00e7\u00e3o"},{"location":"documentation/#documentacao","text":"Este site foi criado usando o mkdocs. Criar sites de documenta\u00e7\u00e3o com MkDocs de forma simples usando markdown e ele exporta (build) em HTML.","title":"Documenta\u00e7\u00e3o"},{"location":"documentation/#site-oficial","text":"https://www.mkdocs.org/","title":"Site oficial"},{"location":"documentation/#instalacao","text":"https://www.mkdocs.org/#installation","title":"Instala\u00e7\u00e3o"},{"location":"documentation/#instalacao-no-linux-mint-20","text":"1 2 3 4 5 6 7 sudo apt-get install python3-pip sudo pip install --upgrade pip sudo pip3 install mkdocs mkdocs --version","title":"Instala\u00e7\u00e3o no Linux Mint 20"},{"location":"documentation/#criar-um-site-de-documentacao","text":"Acessar o terminal/prompt e executar para criar o site na pasta docs 1 mkdocs new docs","title":"Criar um site de documenta\u00e7\u00e3o"},{"location":"documentation/#o-comando-acima-criou-a-estrutura","text":"1 2 3 4 5 6 7 8 9 mkdocs.yml /docs/ index.md cd docs mkdocs serve http://127.0.0.1:8000/","title":"O comando acima criou a estrutura:"},{"location":"documentation/#exemplo-de-site-este-site-da-documentacao-do-laravel-acl","text":"Configura\u00e7\u00f5e a serem usadas no mkdocs.yml https://www.mkdocs.org/user-guide/configuration Editar o mkdocs.yml e deixar assim: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 site_name: ACL to Laravel 8 theme: name: 'readthedocs' favicon: 'img/favicon.ico' site_url: https://ribafs.github.io/ repo_url: https://github.com/ribafs/laravel-acl/ site_description: ACL Implementation to Laravel 8 site_author: Ribamar FS nav: - In\u00edcio: index.md - Introdu\u00e7\u00e3o: introduction.md - Instala\u00e7\u00e3o: installation.md - Bootstrap: bootstrap.md - Controllers: controllers.md - Views: views.md - Rotas: routes.md - Seeders: seeders.md - Middleware: middleware.md - Provider: provider.md - Trait: trait.md - Tinker: tinker.md - Gerenciando: manager.md - Customiza\u00e7\u00f5es: customizations.md - Testando: training.md - Erros: errors.md - Documenta\u00e7\u00e3o: documentation.md - Licen\u00e7a: license.md - Refer\u00eancias: references.md - Testando: training.md - Cr\u00e9ditos: credits.md Editar o index.md e deixar assim: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 - ## ACL no Laravel 8 - [ Introdu\u00e7\u00e3o ]( introduction.md ) - [ Instala\u00e7\u00e3o ]( installation.md ) - [ BootStrap ]( bootstrap.md ) - [ Controllers ]( controllers.md ) - [ Views ]( views.md ) - [ Middleware ]( middleware.md ) - [ Provider ]( provider.md ) - [ Trait ]( trait.md ) - [ Seeders ]( seeders.md ) - [ Gerenciando ]( manager.md ) - [ Tinker ]( tinker.md ) - [ Testando o ACL ]( training.md ) - [ Customizando ]( customizations.md ) - [ Erros ]( errors.md ) - [ Documenta\u00e7\u00e3o ]( documentation.md ) - [ Refer\u00eancias ]( references.md ) - [ Cr\u00e9ditos ]( credits.md ) - [ Licen\u00e7a ]( license.md ) O index.md mostrar\u00e1 seu conte\u00fado no painel d a direita quando clicamos em In\u00edcio. Agora basta criar cada um dos arquivos com a estens\u00e3o .md. Exemplo: introduction.md 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Introdu\u00e7\u00e3o --- - [ Se\u00e7\u00e3o Inicial ]( #section-1) <a name = \"section-1\" ></a> ## Se\u00e7\u00e3o Inicial Projeto de implementa\u00e7\u00e3o de ACL em aplicativos do Laravel from Scratch Usando Users, Roles, Permissions, Provider, Middleware, Trait, Gates, etc Observa\u00e7\u00e3o: este projeto \u00e9 fruto de v\u00e1rias pesquisas pela internet e de alguns experimentos meus Conta com duas vers\u00f5es - laravel-acl - para o laravel 8 - laravel7-acl - para o laravel 7 ... E segue.","title":"Exemplo de site. Este site da documenta\u00e7\u00e3o do laravel-acl"},{"location":"documentation/#temas","text":"Existem alguns temas legais. Eu gosto muito deste, readthedocs Existem alguns temas nativos e o readthedocsc \u00e9 um deles. Para instalar um tema de terceiros: sudo pip3 install mkdocs-material","title":"Temas"},{"location":"documentation/#usando-um-tema","text":"Basta trocar no mkdocs.yml: 1 2 theme: name: 'readthedocs'","title":"Usando um tema"},{"location":"documentation/#temas-de-terceiros","text":"https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes","title":"Temas de terceiros"},{"location":"documentation/#extensoes","text":"https://facelessuser.github.io/pymdown-extensions/ https://facelessuser.github.io/pymdown-extensions/extensions/highlight/","title":"Extens\u00f5es"},{"location":"documentation/#build","text":"Quando o site estiver pronto, ent\u00e3o exportamos em HTML para hospedar onde quisermos, com o comando mkdocs build Ele cria toda a estrutura HTML na pasta /site Limpando um build anterior mkdocs build --clean Outros comandos mkdocs --help mkdocs build --help","title":"Build"},{"location":"documentation/#atualizacoes-automaticas","text":"Com o server ativo, ap\u00f3s alguma altera\u00e7\u00e3o no mkdocs.yml ele j\u00e1 atualiza sem precisar de refresh","title":"Atualiza\u00e7\u00f5es autom\u00e1ticas"},{"location":"documentation/#imagens","text":"Imagens A pasta fica dentro da docs 1 2 3 docs/ img/ riba.png Link para a imagem num arquivo .md: 1 2 ! [ RibaFS ]( img/riba.png ) ! [ RibaFS ]( ../img/riba.png )","title":"Imagens"},{"location":"documentation/#referencias","text":"Markdown Cheatsheet https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet Mais detalhes http://daringfireball.net/projects/markdown/ http://github.github.com/github-flavored-markdown/ Editor online https://stackedit.io/app Editor offline http://pad.haroopress.com/user.html","title":"Refer\u00eancias"},{"location":"errors/","text":"Erros Erros que podem ocorrer ao instalar e configurar o ribafs/laravel-acl. 1 Call to undefined method App\\Models\\User::roles() Explica\u00e7\u00e3o: Este indica que o trait ainda n\u00e3o foi configurado no model User (vide configura\u00e7\u00f5es) 1 Caso a tela apare\u00e7a quebrada, com os bot\u00f5es inferior da tela Explica\u00e7\u00e3o: Indica que falta configurar o middleware (ver configura\u00e7\u00f5es) Sugest\u00e3o Fique atento para as recomenda\u00e7\u00f5es de instala\u00e7\u00e3o e configura\u00e7\u00f5es que as possibilidades de erro ser\u00e3o minimizadas.","title":"Erros"},{"location":"errors/#erros","text":"Erros que podem ocorrer ao instalar e configurar o ribafs/laravel-acl. 1 Call to undefined method App\\Models\\User::roles() Explica\u00e7\u00e3o: Este indica que o trait ainda n\u00e3o foi configurado no model User (vide configura\u00e7\u00f5es) 1 Caso a tela apare\u00e7a quebrada, com os bot\u00f5es inferior da tela Explica\u00e7\u00e3o: Indica que falta configurar o middleware (ver configura\u00e7\u00f5es)","title":"Erros"},{"location":"errors/#sugestao","text":"Fique atento para as recomenda\u00e7\u00f5es de instala\u00e7\u00e3o e configura\u00e7\u00f5es que as possibilidades de erro ser\u00e3o minimizadas.","title":"Sugest\u00e3o"},{"location":"installation/","text":"Instala\u00e7\u00e3o do laravel-acl Crie um novo aplicativo com laravel 8 para testar o pacote laravel new acl --jet --stack=livewire no cd acl Criar e configurar o banco .env Instalar o laravel-acl 1 composer require ribafs/laravel-acl Publicar 1 php artisan vendor:publish --provider = \"Ribafs\\LaravelAcl\\LaravelAclServiceProvider\" Agora todos os arquivos do pacote j\u00e1 est\u00e3o em seu aplicativo: migrations, seeders, Models, middleware, provider, etc Copiar alguns arquivos existentes Como este pacote n\u00e3o sobrescreve arquivos existestes, ent\u00e3o voc\u00ea precisar\u00e1 executar o comando copy:files (veja abaixo) para copiar sobrescrevendo os arquivos abaixo: DatabaseSeeder.php routes/web.php views/welcome.blade.php views/layouts/app.blade.php O comando far\u00e1 uma c\u00f3pia de cada arquivo sobrescrito, adicionando BAK ao seu nome. Exemplo: routes/webBAK.php Executar 1 php artisan copy:files Configurar Registrar o middleware Editar o app/Http/Kernel.php e adicionar ao array $routeMiddleware = [ 1 'role' = > \\I lluminate \\A uth \\M iddleware \\R oleMiddleware::class, Registrar o provider Editar o config\\app.php e adicione ao array 'providers' => [ 1 App \\P roviders \\P ermissionsServiceProvider::class, Editar o model app/Models/User.php e atualizar 1 2 3 4 5 use App\\Traits\\HasPermissionsTrait; class User extends Authenticatable { use HasPermissionsTrait; Configurar o uso do bootstrap no laravel 8 Adicionar ao app/Providers/AppServiceProvider.php 1 2 3 4 5 6 use Illuminate\\Pagination\\Paginator; public function boot() { Paginator::useBootstrap(); } Alterar o campo id da migration users Mudar para 1 $table->increments('id'); Ajustar o t\u00edtulo do aplicativo (opcional) Editar o .env e mudar a linha com APP_NAME, para algo como: APP_NAME='ACL to Laravel 8' Executar Ap\u00f3s adicionar seu CRUD, execute e teste o ACL no controle do acesso do seu aplicativo. 1 2 3 php artisan migrate --seed php artisan serve localhost:8000/login Use como exemplo: super@gmail.com 123456 Depois teste com os demais: admin, manager e user","title":"Instala\u00e7\u00e3o"},{"location":"installation/#instalacao-do-laravel-acl","text":"","title":"Instala\u00e7\u00e3o do laravel-acl"},{"location":"installation/#crie-um-novo-aplicativo-com-laravel-8-para-testar-o-pacote","text":"laravel new acl --jet --stack=livewire no cd acl","title":"Crie um novo aplicativo com laravel 8 para testar o pacote"},{"location":"installation/#criar-e-configurar-o-banco","text":".env","title":"Criar e configurar o banco"},{"location":"installation/#instalar-o-laravel-acl","text":"1 composer require ribafs/laravel-acl","title":"Instalar o laravel-acl"},{"location":"installation/#publicar","text":"1 php artisan vendor:publish --provider = \"Ribafs\\LaravelAcl\\LaravelAclServiceProvider\" Agora todos os arquivos do pacote j\u00e1 est\u00e3o em seu aplicativo: migrations, seeders, Models, middleware, provider, etc","title":"Publicar"},{"location":"installation/#copiar-alguns-arquivos-existentes","text":"Como este pacote n\u00e3o sobrescreve arquivos existestes, ent\u00e3o voc\u00ea precisar\u00e1 executar o comando copy:files (veja abaixo) para copiar sobrescrevendo os arquivos abaixo: DatabaseSeeder.php routes/web.php views/welcome.blade.php views/layouts/app.blade.php O comando far\u00e1 uma c\u00f3pia de cada arquivo sobrescrito, adicionando BAK ao seu nome. Exemplo: routes/webBAK.php","title":"Copiar alguns arquivos existentes"},{"location":"installation/#executar","text":"1 php artisan copy:files","title":"Executar"},{"location":"installation/#configurar","text":"","title":"Configurar"},{"location":"installation/#registrar-o-middleware","text":"Editar o app/Http/Kernel.php e adicionar ao array $routeMiddleware = [ 1 'role' = > \\I lluminate \\A uth \\M iddleware \\R oleMiddleware::class,","title":"Registrar o middleware"},{"location":"installation/#registrar-o-provider","text":"Editar o config\\app.php e adicione ao array 'providers' => [ 1 App \\P roviders \\P ermissionsServiceProvider::class,","title":"Registrar o provider"},{"location":"installation/#editar-o-model-appmodelsuserphp-e-atualizar","text":"1 2 3 4 5 use App\\Traits\\HasPermissionsTrait; class User extends Authenticatable { use HasPermissionsTrait;","title":"Editar o model app/Models/User.php e atualizar"},{"location":"installation/#configurar-o-uso-do-bootstrap-no-laravel-8","text":"Adicionar ao app/Providers/AppServiceProvider.php 1 2 3 4 5 6 use Illuminate\\Pagination\\Paginator; public function boot() { Paginator::useBootstrap(); }","title":"Configurar o uso do bootstrap no laravel 8"},{"location":"installation/#alterar-o-campo-id-da-migration-users","text":"Mudar para 1 $table->increments('id');","title":"Alterar o campo id da migration users"},{"location":"installation/#ajustar-o-titulo-do-aplicativo-opcional","text":"Editar o .env e mudar a linha com APP_NAME, para algo como: APP_NAME='ACL to Laravel 8'","title":"Ajustar o t\u00edtulo do aplicativo (opcional)"},{"location":"installation/#executar_1","text":"Ap\u00f3s adicionar seu CRUD, execute e teste o ACL no controle do acesso do seu aplicativo. 1 2 3 php artisan migrate --seed php artisan serve localhost:8000/login Use como exemplo: super@gmail.com 123456 Depois teste com os demais: admin, manager e user","title":"Executar"},{"location":"introduction/","text":"Introdu\u00e7\u00e3o Projeto de implementa\u00e7\u00e3o de ACL em aplicativos do Laravel 8 from Scratch Usando Users, Roles, Permissions, Provider, Middleware, Trait, Gates, etc Se\u00e7\u00e3o Inicial Se\u00e7\u00e3o Inicial Objetivos deste projeto Sei que existem v\u00e1rios e \u00f3timos pacotes com a mesma finalidade deste para laravel, como o spatie permissions, o laravel-admin, o laravue, o laratrust e outros mais. Este s\u00e3o pacotes s\u00e3o criados por profissioonais com grande experi\u00eancia com laravel e por conta disso algumas vezes vem com um c\u00f3digo meio complexo. Mas eu estave querendo aprender a fazer eu mesmo, ter o m\u00e1ximo controle poss\u00edvel, usar apenas os recursos nativos do laravel e criar de forma simples, sempre que poss\u00edvel. E o resultado est\u00e1 aqui para voc\u00ea avaliar. Adianto que gostei muito da experiencia e do resultado e que aprendi bastante tamb\u00e9m com a cria\u00e7\u00e3o deste projeto. O controle de acesso (ACL) de aplicativos \u00e9 algo importante, especialmente em grandes aplicativos. Cr\u00edticas, sugest\u00f5es (issues), pull requests, forkes e colabora\u00e7\u00f5es e colaboradores ser\u00e3o muito bem vindos Issues Pull request Observa\u00e7\u00e3o: este projeto \u00e9 fruto de v\u00e1rias pesquisas pela internet e de alguns experimentos meus Conta com duas vers\u00f5es - ribafs/laravel-acl - para o laravel 8 - ribafs/laravel7-acl - para o laravel 7 Planejamento inicial Teremos as seguintes tabelas principais 1 2 3 4 users roles permissions clients Teremos os seguintes usu\u00e1rios 1 2 3 4 1-Super 2-Admin 3-Manager 4-User As roles 1 2 3 4 1-super 2-admin 3-manager 4-user As permiss\u00f5es 1 2 3 4 5 6 7 1-all-all 2-users-all 3-roles-all 4-permissions-all 5-clients-all 6-products-all 7-clients-index Tabelas piv\u00f4 As roles e permissions ser\u00e3o atribuidas aos usu\u00e1rios via c\u00f3digo e n\u00e3o diretamente. Elas ser\u00e3o armazenadas nas tabelas piv\u00f4: - user_role - user_permission - role_permission Tela inicial dos 4 usu\u00e1rios Tela welcome User super User admin User manager User user","title":"Introdu\u00e7\u00e3o"},{"location":"introduction/#introducao","text":"Projeto de implementa\u00e7\u00e3o de ACL em aplicativos do Laravel 8 from Scratch Usando Users, Roles, Permissions, Provider, Middleware, Trait, Gates, etc Se\u00e7\u00e3o Inicial","title":"Introdu\u00e7\u00e3o"},{"location":"introduction/#secao-inicial","text":"","title":"Se\u00e7\u00e3o Inicial"},{"location":"introduction/#objetivos-deste-projeto","text":"Sei que existem v\u00e1rios e \u00f3timos pacotes com a mesma finalidade deste para laravel, como o spatie permissions, o laravel-admin, o laravue, o laratrust e outros mais. Este s\u00e3o pacotes s\u00e3o criados por profissioonais com grande experi\u00eancia com laravel e por conta disso algumas vezes vem com um c\u00f3digo meio complexo. Mas eu estave querendo aprender a fazer eu mesmo, ter o m\u00e1ximo controle poss\u00edvel, usar apenas os recursos nativos do laravel e criar de forma simples, sempre que poss\u00edvel. E o resultado est\u00e1 aqui para voc\u00ea avaliar. Adianto que gostei muito da experiencia e do resultado e que aprendi bastante tamb\u00e9m com a cria\u00e7\u00e3o deste projeto. O controle de acesso (ACL) de aplicativos \u00e9 algo importante, especialmente em grandes aplicativos.","title":"Objetivos deste projeto"},{"location":"introduction/#criticas-sugestoes-issues-pull-requests-forkes-e-colaboracoes-e-colaboradores-serao-muito-bem-vindos","text":"Issues Pull request Observa\u00e7\u00e3o: este projeto \u00e9 fruto de v\u00e1rias pesquisas pela internet e de alguns experimentos meus Conta com duas vers\u00f5es - ribafs/laravel-acl - para o laravel 8 - ribafs/laravel7-acl - para o laravel 7","title":"Cr\u00edticas, sugest\u00f5es (issues), pull requests, forkes e colabora\u00e7\u00f5es e colaboradores ser\u00e3o muito bem vindos"},{"location":"introduction/#planejamento-inicial","text":"Teremos as seguintes tabelas principais 1 2 3 4 users roles permissions clients","title":"Planejamento inicial"},{"location":"introduction/#teremos-os-seguintes-usuarios","text":"1 2 3 4 1-Super 2-Admin 3-Manager 4-User","title":"Teremos os seguintes usu\u00e1rios"},{"location":"introduction/#as-roles","text":"1 2 3 4 1-super 2-admin 3-manager 4-user","title":"As roles"},{"location":"introduction/#as-permissoes","text":"1 2 3 4 5 6 7 1-all-all 2-users-all 3-roles-all 4-permissions-all 5-clients-all 6-products-all 7-clients-index","title":"As permiss\u00f5es"},{"location":"introduction/#tabelas-pivo","text":"As roles e permissions ser\u00e3o atribuidas aos usu\u00e1rios via c\u00f3digo e n\u00e3o diretamente. Elas ser\u00e3o armazenadas nas tabelas piv\u00f4: - user_role - user_permission - role_permission","title":"Tabelas piv\u00f4"},{"location":"introduction/#tela-inicial-dos-4-usuarios","text":"Tela welcome User super User admin User manager User user","title":"Tela inicial dos 4 usu\u00e1rios"},{"location":"license/","text":"Licen\u00e7a license. Please see the license file for more information.","title":"Licen\u00e7a"},{"location":"license/#licenca","text":"license. Please see the license file for more information.","title":"Licen\u00e7a"},{"location":"manager/","text":"Gerenciando o aplicativo At\u00e9 o momento temos 3 formas de gerenciar os aplicativos criados usando o ribafs/laravel-acl: - Usando CRUDs. Muito simples, mas por enquanto gerencia somente as tabelas principais: users, roles, permissions e clients. - Usando o tinker - Usando comandos com artisan As duas \u00faltimas tanto gerenciam as tabelas principais quanto as piv\u00f4. Lembrando que deve evitar anexar roles e permissions manualmente para usu\u00e1rios. Para isso foram criados alguns commands, que gerencial de forma adequada. Adicionar user com role e permission anexada a ele 1 2 3 4 add:user { name } { email } { password } { slug-role } { slug-perm } Exemplo: php artisan add:user 'User user2' user2@gmail.com 123456 manager clients-index Atualizar usu\u00e1rio existente anexando uma role e uma permission a ele gravado em user_role e user_permission 1 2 3 4 user:upd { email } { slug-role } { slug-perm } Exemplo: php artisan user:upd manager@gmail.com manager clients-index Adicionar uma role para a tabela roles 1 2 3 4 add:role { name-role } { slug-role } Exemplo: php artisan add:role 'Admin test' admin-test Adicionar uma permission para a tabela permissions 1 2 3 4 add:perm { name-perm } { slug-perm } Exemplo: php artisan add:perm 'Clients test' clients-testt Remover permission de user de 'user-permission' 1 2 3 4 del:perm { email-user } { slug-perm } Exemplo: php artisan del:perm super@gmail.com clients-index Remover role de user de 'user_role' 1 2 3 4 del:role { email-user } { slug-role } Exemplo: php artisan del:role super@gmail.com user","title":"Gerenciando"},{"location":"manager/#gerenciando-o-aplicativo","text":"At\u00e9 o momento temos 3 formas de gerenciar os aplicativos criados usando o ribafs/laravel-acl: - Usando CRUDs. Muito simples, mas por enquanto gerencia somente as tabelas principais: users, roles, permissions e clients. - Usando o tinker - Usando comandos com artisan As duas \u00faltimas tanto gerenciam as tabelas principais quanto as piv\u00f4. Lembrando que deve evitar anexar roles e permissions manualmente para usu\u00e1rios. Para isso foram criados alguns commands, que gerencial de forma adequada.","title":"Gerenciando o aplicativo"},{"location":"manager/#adicionar-user-com-role-e-permission-anexada-a-ele","text":"1 2 3 4 add:user { name } { email } { password } { slug-role } { slug-perm } Exemplo: php artisan add:user 'User user2' user2@gmail.com 123456 manager clients-index","title":"Adicionar user com role e permission anexada a ele"},{"location":"manager/#atualizar-usuario-existente-anexando-uma-role-e-uma-permission-a-ele","text":"gravado em user_role e user_permission 1 2 3 4 user:upd { email } { slug-role } { slug-perm } Exemplo: php artisan user:upd manager@gmail.com manager clients-index","title":"Atualizar usu\u00e1rio existente anexando uma role e uma permission a ele"},{"location":"manager/#adicionar-uma-role-para-a-tabela-roles","text":"1 2 3 4 add:role { name-role } { slug-role } Exemplo: php artisan add:role 'Admin test' admin-test","title":"Adicionar uma role para a tabela roles"},{"location":"manager/#adicionar-uma-permission-para-a-tabela-permissions","text":"1 2 3 4 add:perm { name-perm } { slug-perm } Exemplo: php artisan add:perm 'Clients test' clients-testt","title":"Adicionar uma permission para a tabela permissions"},{"location":"manager/#remover-permission-de-user-de-user-permission","text":"1 2 3 4 del:perm { email-user } { slug-perm } Exemplo: php artisan del:perm super@gmail.com clients-index","title":"Remover permission de user de 'user-permission'"},{"location":"manager/#remover-role-de-user-de-user_role","text":"1 2 3 4 del:role { email-user } { slug-role } Exemplo: php artisan del:role super@gmail.com user","title":"Remover role de user de 'user_role'"},{"location":"middleware/","text":"Middleware RoleMiddleware Este \u00e9 o middleware usado. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?php namespace App\\Http\\Middleware ; use Closure ; use Illuminate\\Http\\Request ; class RoleMiddleware { /** * Handle an incoming request. * * @param \\Illuminate\\Http\\Request $request * @param \\Closure $next * @return mixed */ public function handle ( Request $request , Closure $next , $role , $permission = null ) { if ( ! $request -> user () -> hasRole ( $role )) { abort ( 404 ); } if ( $permission !== null && ! $request -> user () -> can ( $permission )) { abort ( 404 ); } return $next ( $request ); } } M\u00e9todo can($permission) Aqui nasce nosso m\u00e9todo can($permission), que pode ser usado nos actions dos controller, para controlar o acesso pelo slug da permission Usando Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all 1 2 3 4 5 public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Middleware"},{"location":"middleware/#middleware-rolemiddleware","text":"Este \u00e9 o middleware usado. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <?php namespace App\\Http\\Middleware ; use Closure ; use Illuminate\\Http\\Request ; class RoleMiddleware { /** * Handle an incoming request. * * @param \\Illuminate\\Http\\Request $request * @param \\Closure $next * @return mixed */ public function handle ( Request $request , Closure $next , $role , $permission = null ) { if ( ! $request -> user () -> hasRole ( $role )) { abort ( 404 ); } if ( $permission !== null && ! $request -> user () -> can ( $permission )) { abort ( 404 ); } return $next ( $request ); } }","title":"Middleware RoleMiddleware"},{"location":"middleware/#metodo-canpermission","text":"Aqui nasce nosso m\u00e9todo can($permission), que pode ser usado nos actions dos controller, para controlar o acesso pelo slug da permission","title":"M\u00e9todo can($permission)"},{"location":"middleware/#usando","text":"Testar de o usu\u00e1rio logado pode usar a permiss\u00e3o all-all 1 2 3 4 5 public function index(Request $request){ if ($request->user()->can('all-all')) { return 'Seja muito bem vindo seu Super'; } }","title":"Usando"},{"location":"provider/","text":"Provider A defini\u00e7\u00e3o das tags customizadas do blade surgiu no provider abaixo Usando nas blades 1 2 @ role @ endrole Que dever\u00e3o ser usadas nas blades Para uso nos controllers e routes temos: 1 2 3 - super:role - admin:role - etc Nosso provider 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php namespace App\\Providers ; use App\\Models\\Permission ; use Illuminate\\Support\\Facades\\Blade ; use Illuminate\\Support\\Facades\\Gate ; use Illuminate\\Support\\ServiceProvider ; class PermissionsServiceProvider extends ServiceProvider { public function register () { // } public function boot () { try { Permission :: get () -> map ( function ( $permission ) { Gate :: define ( $permission -> slug , function ( $user ) use ( $permission ) { return $user -> hasPermissionTo ( $permission ); }); }); } catch ( \\Exception $e ) { report ( $e ); return false ; } //Blade directives Blade :: directive ( 'role' , function ( $role ) { return \"<?php if(auth()->check() && auth()->user()->hasRole( { $role } )) : ?>\" ; }); Blade :: directive ( 'endrole' , function ( $role ) { return \"<?php endif; ?>\" ; }); } } Para proteger as rotas Testar o middleware com 1 2 3 4 5 6 7 - role:super - role:admin - etc Route::group(['middleware' => 'role:super'], function() { Route::get('/super', 'App\\Http\\Controllers\\TesteController@super'); }); Outro exemplo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 Route::middleware(['auth:sanctum', 'verified'])->get('/dashboard', function () { $super = (Auth::user()->hasRole('super')); $admin = (Auth::user()->hasRole('admin')); $manager = (Auth::user()->hasRole('manager')); $user = (Auth::user()->hasRole('user')); if($super) { return redirect('super/users'); }elseif($admin) { return redirect('admin/users'); }elseif($manager) { return redirect('manager/clients'); }elseif($user) { return redirect('user/clients'); } return view('dashboard'); })->name('dashboard'); Route::get('/home', function () { return view('home'); })->name('home'); Route::group(['middleware' => ['auth:sanctum', 'verified']], function () { Route::group(['middleware' => ['role:super'], 'prefix' => 'super'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); // super/users Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); // super/roles Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); // super/permissions Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); // super/clients Route::resource('products', 'App\\Http\\Controllers\\ProductController'); // super/products }); Route::group(['middleware' => ['role:admin'], 'prefix' => 'admin'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); }); Route::group(['middleware' => ['role:manager'], 'prefix' => 'manager'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); Route::resource('products', 'App\\Http\\Controllers\\ProductController'); }); Route::group(['middleware' => ['role:user'], 'prefix' => 'user'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); }); });","title":"Provider"},{"location":"provider/#provider","text":"A defini\u00e7\u00e3o das tags customizadas do blade surgiu no provider abaixo","title":"Provider"},{"location":"provider/#usando-nas-blades","text":"1 2 @ role @ endrole Que dever\u00e3o ser usadas nas blades","title":"Usando nas blades"},{"location":"provider/#para-uso-nos-controllers-e-routes-temos","text":"1 2 3 - super:role - admin:role - etc","title":"Para uso nos controllers e routes temos:"},{"location":"provider/#nosso-provider","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <?php namespace App\\Providers ; use App\\Models\\Permission ; use Illuminate\\Support\\Facades\\Blade ; use Illuminate\\Support\\Facades\\Gate ; use Illuminate\\Support\\ServiceProvider ; class PermissionsServiceProvider extends ServiceProvider { public function register () { // } public function boot () { try { Permission :: get () -> map ( function ( $permission ) { Gate :: define ( $permission -> slug , function ( $user ) use ( $permission ) { return $user -> hasPermissionTo ( $permission ); }); }); } catch ( \\Exception $e ) { report ( $e ); return false ; } //Blade directives Blade :: directive ( 'role' , function ( $role ) { return \"<?php if(auth()->check() && auth()->user()->hasRole( { $role } )) : ?>\" ; }); Blade :: directive ( 'endrole' , function ( $role ) { return \"<?php endif; ?>\" ; }); } }","title":"Nosso provider"},{"location":"provider/#para-proteger-as-rotas","text":"Testar o middleware com 1 2 3 4 5 6 7 - role:super - role:admin - etc Route::group(['middleware' => 'role:super'], function() { Route::get('/super', 'App\\Http\\Controllers\\TesteController@super'); });","title":"Para proteger as rotas"},{"location":"provider/#outro-exemplo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 Route::middleware(['auth:sanctum', 'verified'])->get('/dashboard', function () { $super = (Auth::user()->hasRole('super')); $admin = (Auth::user()->hasRole('admin')); $manager = (Auth::user()->hasRole('manager')); $user = (Auth::user()->hasRole('user')); if($super) { return redirect('super/users'); }elseif($admin) { return redirect('admin/users'); }elseif($manager) { return redirect('manager/clients'); }elseif($user) { return redirect('user/clients'); } return view('dashboard'); })->name('dashboard'); Route::get('/home', function () { return view('home'); })->name('home'); Route::group(['middleware' => ['auth:sanctum', 'verified']], function () { Route::group(['middleware' => ['role:super'], 'prefix' => 'super'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); // super/users Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); // super/roles Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); // super/permissions Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); // super/clients Route::resource('products', 'App\\Http\\Controllers\\ProductController'); // super/products }); Route::group(['middleware' => ['role:admin'], 'prefix' => 'admin'], function () { Route::resource('users', 'App\\Http\\Controllers\\UserController'); Route::resource('roles', 'App\\Http\\Controllers\\RoleController'); Route::resource('permissions', 'App\\Http\\Controllers\\PermissionController'); }); Route::group(['middleware' => ['role:manager'], 'prefix' => 'manager'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); Route::resource('products', 'App\\Http\\Controllers\\ProductController'); }); Route::group(['middleware' => ['role:user'], 'prefix' => 'user'], function () { Route::resource('clients', 'App\\Http\\Controllers\\ClientController'); }); });","title":"Outro exemplo"},{"location":"references/","text":"Refer\u00eancias Alguns dos tutoriais pesquisados via Google, estudados, testados e adaptados para este proejto https://www.laravelcode.com/post/laravel-7-user-roles-and-permissions-tutorial-without-packages https://www.codechief.org/article/user-roles-and-permissions-tutorial-in-laravel-without-packages https://github.com/techmahedy/user-roles-and-permission-access http://www.rscoder.com/2020/05/laravel-7x-user-roles-and-permissions.html https://medium.com/@16shuklarahul/laravel-7-x-9ed4d41d327c https://itsolutionstuff.com/post/laravel-58-user-roles-and-permissions-tutorialexample.html https://github.com/usamamuneerchaudhary/roles-permissions https://github.com/artesaos/defender https://medium.com/swlh/laravel-authorization-and-roles-permission-management-6d8f2043ea20 https://thewebtier.com/laravel/understanding-roles-permissions-laravel/ Tamb\u00e9m recebi muitas informa\u00e7\u00f5es \u00fateis de grupo Laravel Brasil do Facebook - https://www.facebook.com/groups/laravelbrasil https://stackoverflow.com/ https://laracasts.com/discuss/channels/laravel/ E de outras generosas fontes","title":"Refer\u00eancias"},{"location":"references/#referencias","text":"Alguns dos tutoriais pesquisados via Google, estudados, testados e adaptados para este proejto https://www.laravelcode.com/post/laravel-7-user-roles-and-permissions-tutorial-without-packages https://www.codechief.org/article/user-roles-and-permissions-tutorial-in-laravel-without-packages https://github.com/techmahedy/user-roles-and-permission-access http://www.rscoder.com/2020/05/laravel-7x-user-roles-and-permissions.html https://medium.com/@16shuklarahul/laravel-7-x-9ed4d41d327c https://itsolutionstuff.com/post/laravel-58-user-roles-and-permissions-tutorialexample.html https://github.com/usamamuneerchaudhary/roles-permissions https://github.com/artesaos/defender https://medium.com/swlh/laravel-authorization-and-roles-permission-management-6d8f2043ea20 https://thewebtier.com/laravel/understanding-roles-permissions-laravel/ Tamb\u00e9m recebi muitas informa\u00e7\u00f5es \u00fateis de grupo Laravel Brasil do Facebook - https://www.facebook.com/groups/laravelbrasil https://stackoverflow.com/ https://laracasts.com/discuss/channels/laravel/ E de outras generosas fontes","title":"Refer\u00eancias"},{"location":"routes/","text":"Rotas As rotas deste projeto s\u00e3o espec\u00edficas com algumas nuances pr\u00f3prias. Confira. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php use Illuminate\\Support\\Facades\\Route ; use Illuminate\\Support\\Facades\\Auth ; Route :: get ( '/' , function () { return view ( 'welcome' ); }); Route :: get ( '/home' , function () { return view ( 'home' ); }) -> name ( 'home' ); Route :: middleware ([ 'auth' ]) -> get ( '/dashboard' , function () { $super = Auth :: user () -> hasRole ( 'super' ); $admin = Auth :: user () -> hasRole ( 'admin' ); $manager = Auth :: user () -> hasRole ( 'manager' ); $user = Auth :: user () -> hasRole ( 'user' ); if ( $super || $admin ) { return redirect ( '/admin/users' ); } elseif ( $manager || $user ) { return redirect ( '/admin/clients' ); } else { return view ( '/dashboard' ); } }) -> name ( 'dashboard' ); Route :: group ([ 'prefix' => 'admin' , 'middleware' => 'auth:sanctum' ], function (){ Route :: resource ( 'users' , 'App\\Http\\Controllers\\Admin\\UserController' ); Route :: resource ( 'roles' , 'App\\Http\\Controllers\\Admin\\RoleController' ); Route :: resource ( 'permissions' , 'App\\Http\\Controllers\\Admin\\PermissionController' ); Route :: resource ( 'clients' , 'App\\Http\\Controllers\\Admin\\ClientController' ); });","title":"Rotas"},{"location":"routes/#rotas","text":"As rotas deste projeto s\u00e3o espec\u00edficas com algumas nuances pr\u00f3prias. Confira. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php use Illuminate\\Support\\Facades\\Route ; use Illuminate\\Support\\Facades\\Auth ; Route :: get ( '/' , function () { return view ( 'welcome' ); }); Route :: get ( '/home' , function () { return view ( 'home' ); }) -> name ( 'home' ); Route :: middleware ([ 'auth' ]) -> get ( '/dashboard' , function () { $super = Auth :: user () -> hasRole ( 'super' ); $admin = Auth :: user () -> hasRole ( 'admin' ); $manager = Auth :: user () -> hasRole ( 'manager' ); $user = Auth :: user () -> hasRole ( 'user' ); if ( $super || $admin ) { return redirect ( '/admin/users' ); } elseif ( $manager || $user ) { return redirect ( '/admin/clients' ); } else { return view ( '/dashboard' ); } }) -> name ( 'dashboard' ); Route :: group ([ 'prefix' => 'admin' , 'middleware' => 'auth:sanctum' ], function (){ Route :: resource ( 'users' , 'App\\Http\\Controllers\\Admin\\UserController' ); Route :: resource ( 'roles' , 'App\\Http\\Controllers\\Admin\\RoleController' ); Route :: resource ( 'permissions' , 'App\\Http\\Controllers\\Admin\\PermissionController' ); Route :: resource ( 'clients' , 'App\\Http\\Controllers\\Admin\\ClientController' ); });","title":"Rotas"},{"location":"seeders/","text":"Seeders Este pacote vem com dois seeders: clients e permissions Clients 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php namespace Database\\Seeders ; use Illuminate\\Database\\Seeder ; use DB ; class ClientsSeeder extends Seeder { /** * Run the database seeds. * * @return void */ public function run () { $faker = \\Faker\\Factory :: create (); for ( $i = 0 ; $i <= 100 ; $i ++ ) : DB :: table ( 'clients' ) -> insert ([ 'name' => $faker -> name , 'email' => $faker -> email , ]); endfor ; } } Permissions O PermissionsSeeder \u00e9 o cora\u00e7\u00e3o do pacote laravel-acl. Ele faz o cadastro inicial das tabelas principais e piv\u00f4. O cadastro das tabelas piv\u00f4 \u00e9 feito indiretamente usando o m\u00e9todo attach(). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php namespace Database\\Seeders ; use Illuminate\\Database\\Seeder ; use App\\Models\\Permission ; use App\\Models\\Role ; use App\\Models\\User ; class PermissionsSeeder extends Seeder { public function run () { // Consultar e guardar em $super_permission a permiss\u00e3o all-all e demais $super_permission = Permission :: where ( 'slug' , 'all-all' ) -> first (); $admin_permission1 = Permission :: where ( 'slug' , 'users-all' ) -> first (); $admin_permission2 = Permission :: where ( 'slug' , 'roles-all' ) -> first (); $admin_permission3 = Permission :: where ( 'slug' , 'permissions-all' ) -> first (); $manager_permission1 = Permission :: where ( 'slug' , 'clients-all' ) -> first (); $manager_permission2 = Permission :: where ( 'slug' , 'products-all' ) -> first (); $user_permission = Permission :: where ( 'slug' , 'clients-index' ) -> first (); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 // Cadastrar a role super e anexar a ela suas permiss\u00f5es $ super_role = new Role (); $ super_role -> slug = 'super' ; $ super_role -> name = 'Super role' ; $ super_role -> save (); $ super_role -> permissions () -> attach ( $ super_permission ); // para que esta permission seja anexada sem problema , precisa existir em 'permissions' // Cadastrar a role admin e anexar a ela suas permiss\u00f5es $ admin_role = new Role (); $ admin_role -> slug = 'admin' ; $ admin_role -> name = 'Admin role' ; $ admin_role -> save (); $ admin_role -> permissions () -> attach ( $ admin_permission1 ); $ admin_role -> permissions () -> attach ( $ admin_permission2 ); $ admin_role -> permissions () -> attach ( $ admin_permission3 ); // Cadastrar a role manager e anexar a ela suas permiss\u00f5es $ manager_role = new Role (); $ manager_role -> slug = 'manager' ; $ manager_role -> name = 'Manager role' ; $ manager_role -> save (); $ manager_role -> permissions () -> attach ( $ manager_permission1 ); $ manager_role -> permissions () -> attach ( $ manager_permission2 ); // Cadastrar a role user e anexar a ela suas permiss\u00f5es $ user_role = new Role (); $ user_role -> slug = 'user' ; $ user_role -> name = 'Uer role' ; $ user_role -> save (); $ user_role -> permissions () -> attach ( $ user_permission ); // Consultar e guardar em $ super_role a role super e demais $ super_role = Role :: where ( 'slug' , 'super' ) -> first (); $ admin_role = Role :: where ( 'slug' , 'admin' ) -> first (); $ manager_role = Role :: where ( 'slug' , 'manager' ) -> first (); $ user_role = Role :: where ( 'slug' , 'user' ) -> first (); // Cadastrar no banco a permission all - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ all_all = new Permission (); $ all_all -> slug = 'all-all' ; $ all_all -> name = 'All permissions' ; $ all_all -> save (); $ all_all -> roles () -> attach ( $ super_role ); // para que esta role seja anexada sem problema , precisa existir em 'roles' // Cadastrar no banco a permission user - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ users_all = new Permission (); $ users_all -> slug = 'users-all' ; $ users_all -> name = 'Users all' ; $ users_all -> save (); $ users_all -> roles () -> attach ( $ admin_role ); // Cadastrar no banco a permission roles - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ roles_all = new Permission (); $ roles_all -> slug = 'roles-all' ; $ roles_all -> name = 'Roless all' ; $ roles_all -> save (); $ roles_all -> roles () -> attach ( $ admin_role ); // Cadastrar no banco a permission permissions - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ permissions_all = new Permission (); $ permissions_all -> slug = 'permissions-all' ; $ permissions_all -> name = 'Permissions all' ; $ permissions_all -> save (); $ permissions_all -> roles () -> attach ( $ admin_role ); // Cadastrar no banco a permission clients - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ clients_all = new Permission (); $ clients_all -> slug = 'clients-all' ; $ clients_all -> name = 'Clients all' ; $ clients_all -> save (); $ clients_all -> roles () -> attach ( $ manager_role ); // Cadastrar no banco a permission products - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ products_all = new Permission (); $ products_all -> slug = 'products-all' ; $ products_all -> name = 'Products all' ; $ products_all -> save (); $ products_all -> roles () -> attach ( $ manager_role ); // Cadastrar no banco a permission clients - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ clients_index = new Permission (); $ clients_index -> slug = 'clients-index' ; $ clients_index -> name = 'Clients index' ; $ clients_index -> save (); $ clients_index -> roles () -> attach ( $ user_role ); // Consultar e guardar em $ super_role a role super $ super_role = Role :: where ( 'slug' , 'super' ) -> first (); $ admin_role = Role :: where ( 'slug' , 'admin' ) -> first (); $ manager_role = Role :: where ( 'slug' , 'manager' ) -> first (); $ user_role = Role :: where ( 'slug' , 'user' ) -> first (); // Consultar e guardar em $ super_perm a permiss\u00e3o all - all e demais $ super_perm = Permission : : where ( 'slug' , 'all-all' ) -> first (); $ admin_perm1 = Permission : : where ( 'slug' , 'users-all' ) -> first (); $ admin_perm2 = Permission : : where ( 'slug' , 'roles-all' ) -> first (); $ admin_perm3 = Permission : : where ( 'slug' , 'permissions-all' ) -> first (); $ manager_perm1 = Permission : : where ( 'slug' , 'clients-all' ) -> first (); $ manager_perm2 = Permission : : where ( 'slug' , 'products-all' ) -> first (); $ user_perm = Permission : : where ( 'slug' , 'clients-index' ) -> first (); // Cadastrar o user Super no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ super = new User (); $ super -> name = 'Super user' ; $ super -> email = 'super@gmail.com' ; $ super -> password = bcrypt ( '123456' ); $ super -> save (); $ super -> roles () -> attach ( $ super_role ); // Esta role precisa existir em 'roles' para que seja adequadamente anexada $ super -> permissions () -> attach ( $ super_perm ); // Esta role precisa existir em 'permissions' para que seja adequadamente anexada // Cadastrar o user Admin no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ admin = new User (); $ admin -> name = 'Admin user' ; $ admin -> email = 'admin@gmail.com' ; $ admin -> password = bcrypt ( '123456' ); $ admin -> save (); $ admin -> roles () -> attach ( $ admin_role ); $ admin -> permissions () -> attach ( $ admin_perm1 ); $ admin -> permissions () -> attach ( $ admin_perm2 ); $ admin -> permissions () -> attach ( $ admin_perm3 ); // Cadastrar o user Manager no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ manager = new User (); $ manager -> name = 'Manager user' ; $ manager -> email = 'manager@gmail.com' ; $ manager -> password = bcrypt ( '123456' ); $ manager -> save (); $ manager -> roles () -> attach ( $ manager_role ); $ manager -> permissions () -> attach ( $ manager_perm1 ); $ manager -> permissions () -> attach ( $ manager_perm2 ); // Cadastrar o user User no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ user = new User (); $ user -> name = 'User user' ; $ user -> email = 'user@gmail.com' ; $ user -> password = bcrypt ( '123456' ); $ user -> save (); $ user -> roles () -> attach ( $ user_role ); $ user -> permissions () -> attach ( $ user_perm ); } } ```","title":"Seeders"},{"location":"seeders/#seeders","text":"Este pacote vem com dois seeders: clients e permissions","title":"Seeders"},{"location":"seeders/#clients","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php namespace Database\\Seeders ; use Illuminate\\Database\\Seeder ; use DB ; class ClientsSeeder extends Seeder { /** * Run the database seeds. * * @return void */ public function run () { $faker = \\Faker\\Factory :: create (); for ( $i = 0 ; $i <= 100 ; $i ++ ) : DB :: table ( 'clients' ) -> insert ([ 'name' => $faker -> name , 'email' => $faker -> email , ]); endfor ; } }","title":"Clients"},{"location":"seeders/#permissions","text":"O PermissionsSeeder \u00e9 o cora\u00e7\u00e3o do pacote laravel-acl. Ele faz o cadastro inicial das tabelas principais e piv\u00f4. O cadastro das tabelas piv\u00f4 \u00e9 feito indiretamente usando o m\u00e9todo attach(). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php namespace Database\\Seeders ; use Illuminate\\Database\\Seeder ; use App\\Models\\Permission ; use App\\Models\\Role ; use App\\Models\\User ; class PermissionsSeeder extends Seeder { public function run () { // Consultar e guardar em $super_permission a permiss\u00e3o all-all e demais $super_permission = Permission :: where ( 'slug' , 'all-all' ) -> first (); $admin_permission1 = Permission :: where ( 'slug' , 'users-all' ) -> first (); $admin_permission2 = Permission :: where ( 'slug' , 'roles-all' ) -> first (); $admin_permission3 = Permission :: where ( 'slug' , 'permissions-all' ) -> first (); $manager_permission1 = Permission :: where ( 'slug' , 'clients-all' ) -> first (); $manager_permission2 = Permission :: where ( 'slug' , 'products-all' ) -> first (); $user_permission = Permission :: where ( 'slug' , 'clients-index' ) -> first (); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 // Cadastrar a role super e anexar a ela suas permiss\u00f5es $ super_role = new Role (); $ super_role -> slug = 'super' ; $ super_role -> name = 'Super role' ; $ super_role -> save (); $ super_role -> permissions () -> attach ( $ super_permission ); // para que esta permission seja anexada sem problema , precisa existir em 'permissions' // Cadastrar a role admin e anexar a ela suas permiss\u00f5es $ admin_role = new Role (); $ admin_role -> slug = 'admin' ; $ admin_role -> name = 'Admin role' ; $ admin_role -> save (); $ admin_role -> permissions () -> attach ( $ admin_permission1 ); $ admin_role -> permissions () -> attach ( $ admin_permission2 ); $ admin_role -> permissions () -> attach ( $ admin_permission3 ); // Cadastrar a role manager e anexar a ela suas permiss\u00f5es $ manager_role = new Role (); $ manager_role -> slug = 'manager' ; $ manager_role -> name = 'Manager role' ; $ manager_role -> save (); $ manager_role -> permissions () -> attach ( $ manager_permission1 ); $ manager_role -> permissions () -> attach ( $ manager_permission2 ); // Cadastrar a role user e anexar a ela suas permiss\u00f5es $ user_role = new Role (); $ user_role -> slug = 'user' ; $ user_role -> name = 'Uer role' ; $ user_role -> save (); $ user_role -> permissions () -> attach ( $ user_permission ); // Consultar e guardar em $ super_role a role super e demais $ super_role = Role :: where ( 'slug' , 'super' ) -> first (); $ admin_role = Role :: where ( 'slug' , 'admin' ) -> first (); $ manager_role = Role :: where ( 'slug' , 'manager' ) -> first (); $ user_role = Role :: where ( 'slug' , 'user' ) -> first (); // Cadastrar no banco a permission all - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ all_all = new Permission (); $ all_all -> slug = 'all-all' ; $ all_all -> name = 'All permissions' ; $ all_all -> save (); $ all_all -> roles () -> attach ( $ super_role ); // para que esta role seja anexada sem problema , precisa existir em 'roles' // Cadastrar no banco a permission user - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ users_all = new Permission (); $ users_all -> slug = 'users-all' ; $ users_all -> name = 'Users all' ; $ users_all -> save (); $ users_all -> roles () -> attach ( $ admin_role ); // Cadastrar no banco a permission roles - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ roles_all = new Permission (); $ roles_all -> slug = 'roles-all' ; $ roles_all -> name = 'Roless all' ; $ roles_all -> save (); $ roles_all -> roles () -> attach ( $ admin_role ); // Cadastrar no banco a permission permissions - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ permissions_all = new Permission (); $ permissions_all -> slug = 'permissions-all' ; $ permissions_all -> name = 'Permissions all' ; $ permissions_all -> save (); $ permissions_all -> roles () -> attach ( $ admin_role ); // Cadastrar no banco a permission clients - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ clients_all = new Permission (); $ clients_all -> slug = 'clients-all' ; $ clients_all -> name = 'Clients all' ; $ clients_all -> save (); $ clients_all -> roles () -> attach ( $ manager_role ); // Cadastrar no banco a permission products - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ products_all = new Permission (); $ products_all -> slug = 'products-all' ; $ products_all -> name = 'Products all' ; $ products_all -> save (); $ products_all -> roles () -> attach ( $ manager_role ); // Cadastrar no banco a permission clients - all e anexar sua ( a ) respectiva ( s ) role ( s ) $ clients_index = new Permission (); $ clients_index -> slug = 'clients-index' ; $ clients_index -> name = 'Clients index' ; $ clients_index -> save (); $ clients_index -> roles () -> attach ( $ user_role ); // Consultar e guardar em $ super_role a role super $ super_role = Role :: where ( 'slug' , 'super' ) -> first (); $ admin_role = Role :: where ( 'slug' , 'admin' ) -> first (); $ manager_role = Role :: where ( 'slug' , 'manager' ) -> first (); $ user_role = Role :: where ( 'slug' , 'user' ) -> first (); // Consultar e guardar em $ super_perm a permiss\u00e3o all - all e demais $ super_perm = Permission : : where ( 'slug' , 'all-all' ) -> first (); $ admin_perm1 = Permission : : where ( 'slug' , 'users-all' ) -> first (); $ admin_perm2 = Permission : : where ( 'slug' , 'roles-all' ) -> first (); $ admin_perm3 = Permission : : where ( 'slug' , 'permissions-all' ) -> first (); $ manager_perm1 = Permission : : where ( 'slug' , 'clients-all' ) -> first (); $ manager_perm2 = Permission : : where ( 'slug' , 'products-all' ) -> first (); $ user_perm = Permission : : where ( 'slug' , 'clients-index' ) -> first (); // Cadastrar o user Super no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ super = new User (); $ super -> name = 'Super user' ; $ super -> email = 'super@gmail.com' ; $ super -> password = bcrypt ( '123456' ); $ super -> save (); $ super -> roles () -> attach ( $ super_role ); // Esta role precisa existir em 'roles' para que seja adequadamente anexada $ super -> permissions () -> attach ( $ super_perm ); // Esta role precisa existir em 'permissions' para que seja adequadamente anexada // Cadastrar o user Admin no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ admin = new User (); $ admin -> name = 'Admin user' ; $ admin -> email = 'admin@gmail.com' ; $ admin -> password = bcrypt ( '123456' ); $ admin -> save (); $ admin -> roles () -> attach ( $ admin_role ); $ admin -> permissions () -> attach ( $ admin_perm1 ); $ admin -> permissions () -> attach ( $ admin_perm2 ); $ admin -> permissions () -> attach ( $ admin_perm3 ); // Cadastrar o user Manager no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ manager = new User (); $ manager -> name = 'Manager user' ; $ manager -> email = 'manager@gmail.com' ; $ manager -> password = bcrypt ( '123456' ); $ manager -> save (); $ manager -> roles () -> attach ( $ manager_role ); $ manager -> permissions () -> attach ( $ manager_perm1 ); $ manager -> permissions () -> attach ( $ manager_perm2 ); // Cadastrar o user User no banco e anexar a ele sua ( s ) respectiva ( s ) role ( s ) e permission ( s ) $ user = new User (); $ user -> name = 'User user' ; $ user -> email = 'user@gmail.com' ; $ user -> password = bcrypt ( '123456' ); $ user -> save (); $ user -> roles () -> attach ( $ user_role ); $ user -> permissions () -> attach ( $ user_perm ); } } ```","title":"Permissions"},{"location":"testing/","text":"Testando o ACL Testando o controle de acesso ao aplicativo, nas rotas, controllers e views. Acessar com super@gmail.com e 123456 Observe que ele \u00e9 redirecionado para users Veja que seu menu aparece com todos os CRUDs e ele tem acesso a tudo, todos as views de todos os CRUDs Acessar com admin@gmail.com e 123456 Observe que ele \u00e9 redirecionado para users Veja que seu menu aparecem users, roles e permissions, ou seja, administrativos. Acessa estes 3 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa clients nem products. Experimente acessar http://localhost:8000/admin/clients http://localhost:8000/admin/products Acessar com manager@gmail.com e 123456 Observe que ele \u00e9 redirecionado para clients Veja que seu menu aparecem clients e products, ou seja, os de neg\u00f3cio. Acessa estes 2 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa users, roles nem permissions. Experimente acessar http://localhost:8000/admin/users http://localhost:8000/admin/roles http://localhost:8000/admin/permissions http://localhost:8000/admin/permissions/1/edit Acessar com user@gmail.com e 123456 Observe que ele \u00e9 redirecionado para clients Veja que \u00e9 o usu\u00e1rio mais restrito, em seu menu aparece somente clients. Acessa clients e ele tem acesso somente a parte de clients/index. Experimente acessar qualquer outra \u00e1rea, por exemplo: http://localhost:8000/admin/roles http://localhost:8000/admin/clients/1/edit http://localhost:8000/admin/clients/show/1","title":"Testando"},{"location":"testing/#testando-o-acl","text":"Testando o controle de acesso ao aplicativo, nas rotas, controllers e views.","title":"Testando o ACL"},{"location":"testing/#acessar-com-supergmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para users Veja que seu menu aparece com todos os CRUDs e ele tem acesso a tudo, todos as views de todos os CRUDs","title":"Acessar com super@gmail.com e 123456"},{"location":"testing/#acessar-com-admingmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para users Veja que seu menu aparecem users, roles e permissions, ou seja, administrativos. Acessa estes 3 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa clients nem products.","title":"Acessar com admin@gmail.com e 123456"},{"location":"testing/#experimente-acessar","text":"http://localhost:8000/admin/clients http://localhost:8000/admin/products","title":"Experimente acessar"},{"location":"testing/#acessar-com-managergmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para clients Veja que seu menu aparecem clients e products, ou seja, os de neg\u00f3cio. Acessa estes 2 CRUDs e ele tem acesso a tudo deles mas n\u00e3o acessa users, roles nem permissions.","title":"Acessar com manager@gmail.com e 123456"},{"location":"testing/#experimente-acessar_1","text":"http://localhost:8000/admin/users http://localhost:8000/admin/roles http://localhost:8000/admin/permissions http://localhost:8000/admin/permissions/1/edit","title":"Experimente acessar"},{"location":"testing/#acessar-com-usergmailcom-e-123456","text":"Observe que ele \u00e9 redirecionado para clients Veja que \u00e9 o usu\u00e1rio mais restrito, em seu menu aparece somente clients. Acessa clients e ele tem acesso somente a parte de clients/index.","title":"Acessar com user@gmail.com e 123456"},{"location":"testing/#experimente-acessar-qualquer-outra-area-por-exemplo","text":"http://localhost:8000/admin/roles http://localhost:8000/admin/clients/1/edit http://localhost:8000/admin/clients/show/1","title":"Experimente acessar qualquer outra \u00e1rea, por exemplo:"},{"location":"tinker/","text":"Usando o Tinker Usando o Tinker para gerenciar a ACL A maioria das fun\u00e7\u00f5es do trait podem ser usadas via tinker para o gerenciamento do controle de acesso. Exemplos Retornar todas as roles existentes em 'roles' 1 2 3 php artisan tinker $user = User::find(1) // Trazer o user com id 1, no nosso caso o Super user $user->allRoles() Retornar\u00e1 todas as roles Checar se user logado tem uma das roles: admin ou super Verificar\u00e1 na tabela user_role 1 2 3 php artisan tinker $user = User::find(1) // Trazer o user com id 1, no nosso caso o Super user $user->hasRole('admin', 'super') No caso deve retornar true Criar uma nova role Que ficar\u00e1'na tabela 'roles' 1 $user->createRole('Role teste', 'teste') Mostrar\u00e1 a role criada na tela e a gravar\u00e1 na tabela 'roles' Atribuir uma ou mais role para o user atual Ser\u00e1 gravado na tabela user_role. Lembre que somente ser\u00e3o atribuidas se as roles esxistirem em 'roles' 1 2 3 php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('editor','author') N\u00e3o atribuiu nenhuma, pois as roles citadas n\u00e3o existem em 'roles'. Novo teste 1 2 3 php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('user') Agora sim, atribuiu, pois a role 'user' existe. Veja em user_role. Desatribuir uma role de um usu\u00e1rio 1 2 3 php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->deleteRoles('user') Veja em 'user_role' Temos no trait fun\u00e7\u00f5es semelhantes para permissions","title":"Tinker"},{"location":"tinker/#usando-o-tinker","text":"Usando o Tinker para gerenciar a ACL A maioria das fun\u00e7\u00f5es do trait podem ser usadas via tinker para o gerenciamento do controle de acesso.","title":"Usando o Tinker"},{"location":"tinker/#exemplos","text":"","title":"Exemplos"},{"location":"tinker/#retornar-todas-as-roles-existentes-em-roles","text":"1 2 3 php artisan tinker $user = User::find(1) // Trazer o user com id 1, no nosso caso o Super user $user->allRoles() Retornar\u00e1 todas as roles","title":"Retornar todas as roles existentes em 'roles'"},{"location":"tinker/#checar-se-user-logado-tem-uma-das-roles-admin-ou-super","text":"Verificar\u00e1 na tabela user_role 1 2 3 php artisan tinker $user = User::find(1) // Trazer o user com id 1, no nosso caso o Super user $user->hasRole('admin', 'super') No caso deve retornar true","title":"Checar se user logado tem uma das roles: admin ou super"},{"location":"tinker/#criar-uma-nova-role","text":"Que ficar\u00e1'na tabela 'roles' 1 $user->createRole('Role teste', 'teste') Mostrar\u00e1 a role criada na tela e a gravar\u00e1 na tabela 'roles'","title":"Criar uma nova role"},{"location":"tinker/#atribuir-uma-ou-mais-role-para-o-user-atual","text":"Ser\u00e1 gravado na tabela user_role. Lembre que somente ser\u00e3o atribuidas se as roles esxistirem em 'roles' 1 2 3 php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('editor','author') N\u00e3o atribuiu nenhuma, pois as roles citadas n\u00e3o existem em 'roles'.","title":"Atribuir uma ou mais role para o user atual"},{"location":"tinker/#novo-teste","text":"1 2 3 php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->giveRolesTo('user') Agora sim, atribuiu, pois a role 'user' existe. Veja em user_role.","title":"Novo teste"},{"location":"tinker/#desatribuir-uma-role-de-um-usuario","text":"1 2 3 php artisan tinker $user = User::find(3) // Trazer o user com id 3, no nosso caso o Manager user $user->deleteRoles('user') Veja em 'user_role'","title":"Desatribuir uma role de um usu\u00e1rio"},{"location":"tinker/#temos-no-trait-funcoes-semelhantes-para-permissions","text":"","title":"Temos no trait fun\u00e7\u00f5es semelhantes para permissions"},{"location":"trait/","text":"Trait O HasPermissionsTrait \u00e9 pe\u00e7a fundamental do nosso pacote, com as principais fun\u00e7\u00f5es para o controle de acesso. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 <?php namespace App\\Traits ; use App\\Models\\Permission ; use App\\Models\\Role ; trait HasPermissionsTrait { public function roles () { return $this -> belongsToMany ( Role :: class , 'user_role' ); } public function permissions () { return $this -> belongsToMany ( Permission :: class , 'user_permission' ); } // ROLES // Par\u00e2metro: roles. Ex: $user->hasRole('admin', 'super') // Checar se o user atual detem uma das roles especificadas // Retorno: true/false public function hasRole ( ... $roles ) { foreach ( $roles as $role ) { if ( $this -> roles -> contains ( 'slug' , $role )) { return true ; } } return false ; } protected function getAllRoles ( array $roles ) { return Role :: whereIn ( 'slug' , $roles ) -> get (); } // Criar uma role a ser gravada em 'roles' // Par\u00e2metros: $name e $slug da role a ser criada // Sem retorno, grava e mostra na tela a role criada public function createRole ( $name , $slug ){ $role = Role :: create ([ 'name' => $name , 'slug' => $slug ]); return $role ; } // Par\u00e2metro: roles. Ex: $user->giveRolesTo('editor','author')// as roles j\u00e1 devem estar em 'roles' e ser\u00e3o atribuidas ao user locado // Atribuir roles para o user atual, gravadas na tabela user_role // Sem retorno. Grava as roles na tabela user_role para o user atual public function giveRolesTo ( ... $roles ) { $roles = $this -> getAllRoles ( $roles ); if ( $roles === null ) { return $this ; } $this -> roles () -> saveMany ( $roles ); return $this ; } // Remove uma ou mais roles do user atual, que est\u00e3o em user_role // Par\u00e3metros: roles. Ex: $user->deleteRoles('admin', 'user') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deleteRoles ( ... $roles ) { $roles = $this -> getAllRoles ( $roles ); $this -> roles () -> detach ( $roles ); return $this ; } // PERMISSIONS protected function hasPermission ( $permission ) { return ( bool ) $this -> permissions -> where ( 'slug' , $permission ) -> count (); } // Par\u00e2metro: permission. $user->hasPermissionThroughRole('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionThroughRole ( $permission ) { foreach ( $permission -> roles as $role ){ if ( $this -> roles -> contains ( $role )) { return true ; } } return false ; } // Par\u00e2metro: permission. $user->hasPermissionTo('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionTo ( $permission ) { return ( bool ) $this -> hasPermissionThroughRole ( $permission ) || $this -> hasPermission ( $permission ); } // Criar uma permission a ser gravada em 'permissions' // Par\u00e2metros: $name e $slug da permission a ser criada // Sem retorno, grava e mostra na tela a permission criada public function createPermission ( $name , $slug ){ $permission = Permission :: create ([ 'name' => $name , 'slug' => $slug ]); return $permission ; } protected function getAllPermissions ( array $permissions ) { return Permission :: whereIn ( 'slug' , $permissions ) -> get (); } // Par\u00e2metro: $permissions. Ex: $user->givePermissionsTo('clients-index','clients-edit')// as permiss\u00f5es j\u00e1 devem estar em 'permissions' // Grava permiss\u00f5es para o user atual, na tabela user_permission // Sem retorno. Grava as permiss\u00f5es na tabela user_permission para o user atual public function givePermissionsTo ( ... $permissions ) { $permissions = $this -> getAllPermissions ( $permissions ); if ( $permissions === null ) { return $this ; } $this -> permissions () -> saveMany ( $permissions ); return $this ; } // Remove uma ou mais permiss\u00f5es do user atual, que est\u00e3o em user_permission // Par\u00e3metros: permissions. Ex: $user->deletePermissions('clients-index', 'clients-edit') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deletePermissions ( ... $permissions ) { $permissions = $this -> getAllPermissions ( $permissions ); $this -> permissions () -> detach ( $permissions ); return $this ; } }","title":"Trait"},{"location":"trait/#trait","text":"O HasPermissionsTrait \u00e9 pe\u00e7a fundamental do nosso pacote, com as principais fun\u00e7\u00f5es para o controle de acesso. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 <?php namespace App\\Traits ; use App\\Models\\Permission ; use App\\Models\\Role ; trait HasPermissionsTrait { public function roles () { return $this -> belongsToMany ( Role :: class , 'user_role' ); } public function permissions () { return $this -> belongsToMany ( Permission :: class , 'user_permission' ); } // ROLES // Par\u00e2metro: roles. Ex: $user->hasRole('admin', 'super') // Checar se o user atual detem uma das roles especificadas // Retorno: true/false public function hasRole ( ... $roles ) { foreach ( $roles as $role ) { if ( $this -> roles -> contains ( 'slug' , $role )) { return true ; } } return false ; } protected function getAllRoles ( array $roles ) { return Role :: whereIn ( 'slug' , $roles ) -> get (); } // Criar uma role a ser gravada em 'roles' // Par\u00e2metros: $name e $slug da role a ser criada // Sem retorno, grava e mostra na tela a role criada public function createRole ( $name , $slug ){ $role = Role :: create ([ 'name' => $name , 'slug' => $slug ]); return $role ; } // Par\u00e2metro: roles. Ex: $user->giveRolesTo('editor','author')// as roles j\u00e1 devem estar em 'roles' e ser\u00e3o atribuidas ao user locado // Atribuir roles para o user atual, gravadas na tabela user_role // Sem retorno. Grava as roles na tabela user_role para o user atual public function giveRolesTo ( ... $roles ) { $roles = $this -> getAllRoles ( $roles ); if ( $roles === null ) { return $this ; } $this -> roles () -> saveMany ( $roles ); return $this ; } // Remove uma ou mais roles do user atual, que est\u00e3o em user_role // Par\u00e3metros: roles. Ex: $user->deleteRoles('admin', 'user') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deleteRoles ( ... $roles ) { $roles = $this -> getAllRoles ( $roles ); $this -> roles () -> detach ( $roles ); return $this ; } // PERMISSIONS protected function hasPermission ( $permission ) { return ( bool ) $this -> permissions -> where ( 'slug' , $permission ) -> count (); } // Par\u00e2metro: permission. $user->hasPermissionThroughRole('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionThroughRole ( $permission ) { foreach ( $permission -> roles as $role ){ if ( $this -> roles -> contains ( $role )) { return true ; } } return false ; } // Par\u00e2metro: permission. $user->hasPermissionTo('clients-index'). As permiss\u00f5es devem estar em 'permisions' // Checar se o user atual detem a permission citada // Retorno true/false public function hasPermissionTo ( $permission ) { return ( bool ) $this -> hasPermissionThroughRole ( $permission ) || $this -> hasPermission ( $permission ); } // Criar uma permission a ser gravada em 'permissions' // Par\u00e2metros: $name e $slug da permission a ser criada // Sem retorno, grava e mostra na tela a permission criada public function createPermission ( $name , $slug ){ $permission = Permission :: create ([ 'name' => $name , 'slug' => $slug ]); return $permission ; } protected function getAllPermissions ( array $permissions ) { return Permission :: whereIn ( 'slug' , $permissions ) -> get (); } // Par\u00e2metro: $permissions. Ex: $user->givePermissionsTo('clients-index','clients-edit')// as permiss\u00f5es j\u00e1 devem estar em 'permissions' // Grava permiss\u00f5es para o user atual, na tabela user_permission // Sem retorno. Grava as permiss\u00f5es na tabela user_permission para o user atual public function givePermissionsTo ( ... $permissions ) { $permissions = $this -> getAllPermissions ( $permissions ); if ( $permissions === null ) { return $this ; } $this -> permissions () -> saveMany ( $permissions ); return $this ; } // Remove uma ou mais permiss\u00f5es do user atual, que est\u00e3o em user_permission // Par\u00e3metros: permissions. Ex: $user->deletePermissions('clients-index', 'clients-edit') // Sem retorno. Grava as informa\u00e7\u00f5es na tabela e mostra na tela dados do suer atual public function deletePermissions ( ... $permissions ) { $permissions = $this -> getAllPermissions ( $permissions ); $this -> permissions () -> detach ( $permissions ); return $this ; } }","title":"Trait"},{"location":"views/","text":"Views Vejamos duas views como exemplo das views do pacote. Nosso pacote conta com um layout customizado e com as views home.blade.php e welcome.blade.php. View index t\u00edpica Controle de acesso geral O controle de acesso geral \u00e9 para as 3 roles: super, manager e user Controle de acesso espec\u00edfico Mas o controle para todos os bot\u00f5es (new, view, edit e delete) e do form Search \u00e9 permitido apenas para os users: super e manager. O user com role user n\u00e3o tem acesso a estes itens. Customiza\u00e7\u00e3o Logo que o ribafs/laravel-acl \u00e9 instalado, publicado e inteiramente configurado, todas as permiss\u00f5es nas views est\u00e3o assim 1 @role('super', 'admin') Assim somente um super ou admin tem acesso a tudo. Ent\u00e3o precisar\u00e1 ajustar de acordo com suas necessidades e usu\u00e1rios existentes. Necessidades e criatividade Estas motivar\u00e3o voc\u00ea para as customiza\u00e7\u00f5es. Permiss\u00f5es default Por padr\u00e3o eu pensei assim nas permiss\u00f5es de cada role: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 - super: pode tudo, sem exce\u00e7\u00e3o no aplicativo - admin: pode tudo mas somente nas tabelas administrativas: users, roles e permissions - manager: pode tudo nas tabelas tipo de neg\u00f3cio: clients - user: pode somente logar e acessar o index de clients e com restri\u00e7\u00f5es @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager', 'user') <div class=\"col-md-9\"> <div class=\"card\"> @role('super', 'manager') <div class=\"card-header\">Clients</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients/create') }}\" class=\"btn btn-success btn-sm\" title=\"Add New Client\"> <i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Add New </a> <form method=\"GET\" action=\"{{ url('/admin/clients') }}\" accept-charset=\"UTF-8\" class=\"form-inline my-2 my-lg-0 float-right\" role=\"search\"> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" name=\"search\" placeholder=\"Search...\" value=\"{{ request('search') }}\"> <span class=\"input-group-append\"> <button class=\"btn btn-secondary\" type=\"submit\"> <i class=\"fa fa-search\"></i> </button> </span> </div> </form> @endrole <br/> <br/> <div class=\"table-responsive\"> <table class=\"table table-sm\"> <thead> <tr> <th>ID</th><th>Name</th><th>Email</th>@role('super', 'manager')<th>Actions</th>@endrole </tr> </thead> <tbody> @foreach($clients as $item) <tr> <td>{{ $item->id }}</td> <td>{{ $item->name }}</td><td>{{ $item->email }}</td> <td> @role('super', 'manager') <a href=\"{{ url('/admin/clients/' . $item->id) }}\" title=\"View Client\"><button class=\"btn btn-info btn-sm\"><i class=\"fa fa-eye\" aria-hidden=\"true\"></i> View</button></a> <a href=\"{{ url('/admin/clients/' . $item->id . '/edit') }}\" title=\"Edit Client\"><button class=\"btn btn-primary btn-sm\"><i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Edit</button></a> <form method=\"POST\" action=\"{{ url('/admin/clients' . '/' . $item->id) }}\" accept-charset=\"UTF-8\" style=\"display:inline\"> {{ method_field('DELETE') }} {{ csrf_field() }} <button type=\"submit\" class=\"btn btn-danger btn-sm\" title=\"Delete Client\" onclick=\"return confirm(&quot;Confirm delete?&quot;)\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i> Delete</button> </form> @endrole </td> </tr> @endforeach </tbody> </table> <div class=\"pagination-wrapper\"> {!! $clients->appends(['search' => Request::get('search')])->render() !!} </div> </div> </div> </div> </div> @endrole </div> </div> @endsection Uma t\u00edpica edit.blade.php Veja que o acesso desta view \u00e9 somente para os users das roles super e manager. super pode tudo e manager pode tudo na clients. Se fosse uma edit.blade.php da users, roles ou permissions eu mudaria o controle para: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @role('super', 'admin') @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager') <div class=\"col-md-9\"> <div class=\"card\"> <div class=\"card-header\">Edit Client #{{ $client->id }}</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients') }}\" title=\"Back\"><button class=\"btn btn-warning btn-sm\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i> Back</button></a> <br /> <br /> @if ($errors->any()) <ul class=\"alert alert-danger\"> @foreach ($errors->all() as $error) <li>{{ $error }}</li> @endforeach </ul> @endif <form method=\"POST\" action=\"{{ url('/admin/clients/' . $client->id) }}\" accept-charset=\"UTF-8\" class=\"form-horizontal\" enctype=\"multipart/form-data\"> {{ method_field('PATCH') }} {{ csrf_field() }} @include ('admin.clients.form', ['formMode' => 'edit']) </form> </div> </div> </div> @endrole </div> </div> @endsection","title":"Views"},{"location":"views/#views","text":"Vejamos duas views como exemplo das views do pacote. Nosso pacote conta com um layout customizado e com as views home.blade.php e welcome.blade.php.","title":"Views"},{"location":"views/#view-index-tipica","text":"","title":"View index t\u00edpica"},{"location":"views/#controle-de-acesso-geral","text":"O controle de acesso geral \u00e9 para as 3 roles: super, manager e user","title":"Controle de acesso geral"},{"location":"views/#controle-de-acesso-especifico","text":"Mas o controle para todos os bot\u00f5es (new, view, edit e delete) e do form Search \u00e9 permitido apenas para os users: super e manager. O user com role user n\u00e3o tem acesso a estes itens.","title":"Controle de acesso espec\u00edfico"},{"location":"views/#customizacao","text":"Logo que o ribafs/laravel-acl \u00e9 instalado, publicado e inteiramente configurado, todas as permiss\u00f5es nas views est\u00e3o assim 1 @role('super', 'admin') Assim somente um super ou admin tem acesso a tudo. Ent\u00e3o precisar\u00e1 ajustar de acordo com suas necessidades e usu\u00e1rios existentes.","title":"Customiza\u00e7\u00e3o"},{"location":"views/#necessidades-e-criatividade","text":"Estas motivar\u00e3o voc\u00ea para as customiza\u00e7\u00f5es.","title":"Necessidades e criatividade"},{"location":"views/#permissoes-default","text":"Por padr\u00e3o eu pensei assim nas permiss\u00f5es de cada role: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 - super: pode tudo, sem exce\u00e7\u00e3o no aplicativo - admin: pode tudo mas somente nas tabelas administrativas: users, roles e permissions - manager: pode tudo nas tabelas tipo de neg\u00f3cio: clients - user: pode somente logar e acessar o index de clients e com restri\u00e7\u00f5es @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager', 'user') <div class=\"col-md-9\"> <div class=\"card\"> @role('super', 'manager') <div class=\"card-header\">Clients</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients/create') }}\" class=\"btn btn-success btn-sm\" title=\"Add New Client\"> <i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Add New </a> <form method=\"GET\" action=\"{{ url('/admin/clients') }}\" accept-charset=\"UTF-8\" class=\"form-inline my-2 my-lg-0 float-right\" role=\"search\"> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" name=\"search\" placeholder=\"Search...\" value=\"{{ request('search') }}\"> <span class=\"input-group-append\"> <button class=\"btn btn-secondary\" type=\"submit\"> <i class=\"fa fa-search\"></i> </button> </span> </div> </form> @endrole <br/> <br/> <div class=\"table-responsive\"> <table class=\"table table-sm\"> <thead> <tr> <th>ID</th><th>Name</th><th>Email</th>@role('super', 'manager')<th>Actions</th>@endrole </tr> </thead> <tbody> @foreach($clients as $item) <tr> <td>{{ $item->id }}</td> <td>{{ $item->name }}</td><td>{{ $item->email }}</td> <td> @role('super', 'manager') <a href=\"{{ url('/admin/clients/' . $item->id) }}\" title=\"View Client\"><button class=\"btn btn-info btn-sm\"><i class=\"fa fa-eye\" aria-hidden=\"true\"></i> View</button></a> <a href=\"{{ url('/admin/clients/' . $item->id . '/edit') }}\" title=\"Edit Client\"><button class=\"btn btn-primary btn-sm\"><i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Edit</button></a> <form method=\"POST\" action=\"{{ url('/admin/clients' . '/' . $item->id) }}\" accept-charset=\"UTF-8\" style=\"display:inline\"> {{ method_field('DELETE') }} {{ csrf_field() }} <button type=\"submit\" class=\"btn btn-danger btn-sm\" title=\"Delete Client\" onclick=\"return confirm(&quot;Confirm delete?&quot;)\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i> Delete</button> </form> @endrole </td> </tr> @endforeach </tbody> </table> <div class=\"pagination-wrapper\"> {!! $clients->appends(['search' => Request::get('search')])->render() !!} </div> </div> </div> </div> </div> @endrole </div> </div> @endsection","title":"Permiss\u00f5es default"},{"location":"views/#uma-tipica-editbladephp","text":"Veja que o acesso desta view \u00e9 somente para os users das roles super e manager. super pode tudo e manager pode tudo na clients. Se fosse uma edit.blade.php da users, roles ou permissions eu mudaria o controle para: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @role('super', 'admin') @extends('layouts.app') @section('content') <div class=\"container\"> <div class=\"row\"> @include('includes.sidebar') @role('super', 'manager') <div class=\"col-md-9\"> <div class=\"card\"> <div class=\"card-header\">Edit Client #{{ $client->id }}</div> <div class=\"card-body\"> <a href=\"{{ url('/admin/clients') }}\" title=\"Back\"><button class=\"btn btn-warning btn-sm\"><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i> Back</button></a> <br /> <br /> @if ($errors->any()) <ul class=\"alert alert-danger\"> @foreach ($errors->all() as $error) <li>{{ $error }}</li> @endforeach </ul> @endif <form method=\"POST\" action=\"{{ url('/admin/clients/' . $client->id) }}\" accept-charset=\"UTF-8\" class=\"form-horizontal\" enctype=\"multipart/form-data\"> {{ method_field('PATCH') }} {{ csrf_field() }} @include ('admin.clients.form', ['formMode' => 'edit']) </form> </div> </div> </div> @endrole </div> </div> @endsection","title":"Uma t\u00edpica edit.blade.php"}]}